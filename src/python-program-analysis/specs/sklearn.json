{
  "sklearn": {
    "modules": {
      "cluster": {
        "modules": {
          "tests": {
            "modules": {
              "common": {
                "functions": ["generate_clustered_data"],
                "types": {}
              },
              "test_affinity_propagation": {
                "functions": [
                  "test_affinity_propagation",
                  "test_affinity_propagation_predict",
                  "test_affinity_propagation_predict_error",
                  "test_affinity_propagation_fit_non_convergence",
                  "test_affinity_propagation_equal_mutual_similarities",
                  "test_affinity_propagation_predict_non_convergence",
                  "test_equal_similarities_and_preferences"
                ],
                "types": {}
              },
              "test_bicluster": {
                "functions": [
                  "test_get_submatrix",
                  "test_spectral_coclustering",
                  "test_spectral_biclustering",
                  "test_scale_normalize",
                  "test_bistochastic_normalize",
                  "test_log_normalize",
                  "test_fit_best_piecewise",
                  "test_project_and_cluster",
                  "test_perfect_checkerboard",
                  "test_errors"
                ],
                "types": {
                  "MockBiclustering": {
                    "methods": ["get_indices"]
                  }
                }
              },
              "test_birch": {
                "functions": [
                  "test_n_samples_leaves_roots",
                  "test_partial_fit",
                  "test_birch_predict",
                  "test_n_clusters",
                  "test_sparse_X",
                  "check_branching_factor",
                  "test_branching_factor",
                  "check_threshold",
                  "test_threshold"
                ],
                "types": {}
              },
              "test_dbscan": {
                "functions": [
                  "test_dbscan_similarity",
                  "test_dbscan_feature",
                  "test_dbscan_sparse",
                  "test_dbscan_no_core_samples",
                  "test_dbscan_callable",
                  "test_dbscan_metric_params",
                  "test_dbscan_balltree",
                  "test_input_validation",
                  "test_dbscan_badargs",
                  "test_pickle",
                  "test_boundaries",
                  "test_weighted_dbscan",
                  "test_dbscan_precomputed_metric_with_degenerate_input_arrays",
                  "test_dbscan_precomputed_metric_with_initial_rows_zero"
                ],
                "types": {}
              },
              "test_feature_agglomeration": {
                "functions": ["test_feature_agglomeration"],
                "types": {}
              },
              "test_hierarchical": {
                "functions": [
                  "test_linkage_misc",
                  "test_structured_linkage_tree",
                  "test_unstructured_linkage_tree",
                  "test_height_linkage_tree",
                  "test_agglomerative_clustering_wrong_arg_memory",
                  "test_ward_agglomeration",
                  "assess_same_labelling",
                  "test_scikit_vs_scipy",
                  "test_connectivity_propagation",
                  "test_ward_tree_children_order",
                  "test_ward_linkage_tree_return_distance",
                  "test_connectivity_fixing_non_lil",
                  "test_int_float_dict",
                  "test_connectivity_callable",
                  "test_connectivity_ignores_diagonal",
                  "test_compute_full_tree",
                  "test_n_components",
                  "test_agg_n_clusters",
                  "test_affinity_passed_to_fix_connectivity",
                  "test_small_distance_threshold",
                  "test_cluster_distances_with_distance_threshold",
                  "test_dist_threshold_invalid_parameters",
                  "test_n_components_deprecation"
                ],
                "types": {
                  "FakeAffinity": {
                    "methods": [
                      {
                        "name": "increment",
                        "updates": [0]
                      }
                    ]
                  }
                }
              },
              "test_k_means": {
                "functions": [
                  "test_labels_assignment_and_inertia",
                  "test_minibatch_update_consistency",
                  "test_k_means_new_centers",
                  "test_k_means_precompute_distances_flag",
                  "test_k_means_plus_plus_init_not_precomputed",
                  "test_k_means_random_init_not_precomputed",
                  "test_k_means_n_init",
                  "test_k_means_fortran_aligned_data",
                  "test_mb_kmeans_verbose",
                  "test_minibatch_init_with_large_k",
                  "test_minibatch_k_means_init_multiple_runs_with_explicit_centers",
                  "test_minibatch_sensible_reassign_fit",
                  "test_minibatch_sensible_reassign_partial_fit",
                  "test_minibatch_reassign",
                  "test_minibatch_with_many_reassignments",
                  "test_sparse_mb_k_means_callable_init",
                  "test_mini_batch_k_means_random_init_partial_fit",
                  "test_minibatch_default_init_size",
                  "test_minibatch_tol",
                  "test_minibatch_set_init_size",
                  "test_k_means_copyx",
                  "test_k_means_non_collapsed",
                  "test_int_input",
                  "test_transform",
                  "test_fit_transform",
                  "test_full_vs_elkan",
                  "test_n_init",
                  "test_k_means_function",
                  "test_x_squared_norms_init_centroids",
                  "test_max_iter_error",
                  "test_k_means_init_centers",
                  "test_sparse_validate_centers",
                  "test_less_centers_than_unique_points",
                  "test_weighted_vs_repeated",
                  "test_unit_weights_vs_no_weights",
                  "test_scaled_weights",
                  "test_sample_weight_length",
                  "test_check_sample_weight",
                  "test_iter_attribute",
                  "test_k_means_empty_cluster_relocated"
                ],
                "types": {}
              },
              "test_mean_shift": {
                "functions": [
                  "test_estimate_bandwidth",
                  "test_estimate_bandwidth_1sample",
                  "test_mean_shift_negative_bandwidth",
                  "test_estimate_bandwidth_with_sparse_matrix",
                  "test_parallel",
                  "test_meanshift_predict",
                  "test_meanshift_all_orphans",
                  "test_unfitted",
                  "test_cluster_intensity_tie",
                  "test_bin_seeds"
                ],
                "types": {}
              },
              "test_optics": {
                "functions": [
                  "test_extract_xi",
                  "test_cluster_hierarchy_",
                  "test_correct_number_of_clusters",
                  "test_minimum_number_of_sample_check",
                  "test_bad_extract",
                  "test_bad_reachability",
                  "test_close_extract",
                  "test_min_samples_edge_case",
                  "test_min_cluster_size_invalid2",
                  "test_processing_order",
                  "test_compare_to_ELKI",
                  "test_wrong_cluster_method",
                  "test_extract_dbscan",
                  "test_precomputed_dists"
                ],
                "types": {}
              },
              "test_spectral": {
                "functions": [
                  "test_spectral_unknown_mode",
                  "test_spectral_unknown_assign_labels",
                  "test_spectral_clustering_sparse",
                  "test_affinities",
                  "test_spectral_clustering_with_arpack_amg_solvers"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "affinity_propagation_": {
            "functions": ["affinity_propagation"],
            "types": {
              "AffinityPropagation": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              }
            }
          },
          "bicluster": {
            "functions": [],
            "types": {
              "BaseSpectral": {
                "methods": ["fit"]
              },
              "SpectralCoclustering": {
                "methods": []
              },
              "SpectralBiclustering": {
                "methods": []
              }
            }
          },
          "birch": {
            "functions": [],
            "types": {
              "Birch": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "predict",
                  "transform"
                ]
              }
            }
          },
          "dbscan_": {
            "functions": ["dbscan"],
            "types": {
              "DBSCAN": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_predict",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "hierarchical": {
            "functions": [
              "ward_tree",
              {
                "name": "linkage_tree",
                "updates": [1]
              }
            ],
            "types": {
              "AgglomerativeClustering": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "FeatureAgglomeration": {
                "methods": ["fit"]
              }
            }
          },
          "k_means_": {
            "functions": ["k_means"],
            "types": {
              "KMeans": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_predict",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "predict",
                  "score"
                ]
              },
              "MiniBatchKMeans": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              }
            }
          },
          "mean_shift_": {
            "functions": ["estimate_bandwidth", "mean_shift", "get_bin_seeds"],
            "types": {
              "MeanShift": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              }
            }
          },
          "optics_": {
            "functions": [
              "compute_optics_graph",
              "cluster_optics_dbscan",
              "cluster_optics_xi"
            ],
            "types": {
              "OPTICS": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "spectral": {
            "functions": [
              {
                "name": "discretize",
                "updates": [0]
              },
              "spectral_clustering"
            ],
            "types": {
              "SpectralClustering": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "SpectralClustering": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MeanShift": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "AffinityPropagation": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "AgglomerativeClustering": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "FeatureAgglomeration": {
            "methods": ["fit"]
          },
          "KMeans": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_predict",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              },
              "transform",
              "predict",
              "score"
            ]
          },
          "MiniBatchKMeans": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "DBSCAN": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_predict",
                "updates": [0]
              }
            ]
          },
          "OPTICS": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "SpectralBiclustering": {
            "methods": []
          },
          "SpectralCoclustering": {
            "methods": []
          },
          "Birch": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "predict",
              "transform"
            ]
          }
        },
        "functions": [
          "spectral_clustering",
          "mean_shift",
          "estimate_bandwidth",
          "get_bin_seeds",
          "affinity_propagation",
          "ward_tree",
          {
            "name": "linkage_tree",
            "updates": [1]
          },
          "k_means",
          "dbscan",
          "cluster_optics_dbscan",
          "compute_optics_graph",
          "cluster_optics_xi"
        ]
      },
      "compose": {
        "modules": {
          "tests": {
            "modules": {
              "test_column_transformer": {
                "functions": [
                  "test_column_transformer",
                  "test_column_transformer_dataframe",
                  "test_column_transformer_sparse_array",
                  "test_column_transformer_list",
                  "test_column_transformer_sparse_stacking",
                  "test_column_transformer_mixed_cols_sparse",
                  "test_column_transformer_sparse_threshold",
                  "test_column_transformer_error_msg_1D",
                  "test_2D_transformer_output",
                  "test_2D_transformer_output_pandas",
                  "test_column_transformer_invalid_transformer",
                  "test_make_column_transformer",
                  "test_make_column_transformer_pandas",
                  "test_make_column_transformer_kwargs",
                  "test_make_column_transformer_remainder_transformer",
                  "test_column_transformer_get_set_params",
                  "test_column_transformer_named_estimators",
                  "test_column_transformer_cloning",
                  "test_column_transformer_get_feature_names",
                  "test_column_transformer_special_strings",
                  "test_column_transformer_remainder",
                  "test_column_transformer_no_remaining_remainder_transformer",
                  "test_column_transformer_drops_all_remainder_transformer",
                  "test_column_transformer_sparse_remainder_transformer",
                  "test_column_transformer_drop_all_sparse_remainder_transformer",
                  "test_column_transformer_get_set_params_with_remainder",
                  "test_column_transformer_no_estimators",
                  "test_column_transformer_no_estimators_set_params",
                  "test_column_transformer_callable_specifier",
                  "test_column_transformer_negative_column_indexes"
                ],
                "types": {
                  "Trans": {
                    "methods": ["fit", "transform"]
                  },
                  "DoubleTrans": {
                    "methods": ["fit", "transform"]
                  },
                  "SparseMatrixTrans": {
                    "methods": ["fit", "transform"]
                  },
                  "TransNo2D": {
                    "methods": ["fit", "transform"]
                  },
                  "TransRaise": {
                    "methods": ["fit", "transform"]
                  },
                  "TransAssert": {
                    "methods": ["fit", "transform"]
                  },
                  "NoTrans": {
                    "methods": ["fit", "predict"]
                  }
                }
              },
              "test_target": {
                "functions": [
                  "test_transform_target_regressor_error",
                  "test_transform_target_regressor_invertible",
                  "test_transform_target_regressor_functions",
                  "test_transform_target_regressor_functions_multioutput",
                  "test_transform_target_regressor_2d_transformer_multioutput",
                  "test_transform_target_regressor_multi_to_single",
                  "test_transform_target_regressor_ensure_y_array"
                ],
                "types": {
                  "DummyCheckerArrayTransformer": {
                    "methods": ["fit", "transform", "inverse_transform"]
                  },
                  "DummyCheckerListRegressor": {
                    "methods": ["fit", "predict"]
                  },
                  "DummyTransformer": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "transform",
                      "inverse_transform"
                    ]
                  }
                }
              }
            },
            "types": {},
            "functions": []
          }
        },
        "types": {},
        "functions": []
      },
      "covariance": {
        "modules": {
          "tests": {
            "modules": {
              "test_covariance": {
                "functions": [
                  "test_covariance",
                  "test_shrunk_covariance",
                  "test_ledoit_wolf",
                  "test_ledoit_wolf_small",
                  "test_ledoit_wolf_large",
                  "test_oas"
                ],
                "types": {}
              },
              "test_elliptic_envelope": {
                "functions": [
                  "test_elliptic_envelope",
                  "test_score_samples",
                  "test_raw_values_deprecation",
                  "test_threshold_deprecation"
                ],
                "types": {}
              },
              "test_graphical_lasso": {
                "functions": [
                  "test_graphical_lasso",
                  "test_graphical_lasso_iris",
                  "test_graph_lasso_2D",
                  "test_graphical_lasso_iris_singular"
                ],
                "types": {}
              },
              "test_graph_lasso": {
                "functions": [],
                "types": {}
              },
              "test_robust_covariance": {
                "functions": [
                  "test_mcd",
                  "test_fast_mcd_on_invalid_input",
                  "test_mcd_class_on_invalid_input",
                  "launch_mcd_on_dataset",
                  "test_mcd_issue1127",
                  "test_mcd_issue3367",
                  "test_mcd_support_covariance_is_zero",
                  "test_mcd_increasing_det_warning"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "elliptic_envelope": {
            "functions": [],
            "types": {
              "EllipticEnvelope": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "decision_function",
                  "score_samples",
                  "predict",
                  "score"
                ]
              }
            }
          },
          "empirical_covariance_": {
            "functions": ["log_likelihood", "empirical_covariance"],
            "types": {
              "EmpiricalCovariance": {
                "methods": [
                  "get_precision",
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "score",
                  "error_norm",
                  "mahalanobis"
                ]
              }
            }
          },
          "graph_lasso_": {
            "functions": [
              "alpha_max",
              "graphical_lasso",
              "graphical_lasso_path"
            ],
            "types": {
              "GraphicalLasso": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "GraphicalLassoCV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "GraphLasso": {
                "methods": []
              },
              "GraphLassoCV": {
                "methods": []
              }
            }
          },
          "robust_covariance": {
            "functions": ["c_step", "select_candidates", "fast_mcd"],
            "types": {
              "MinCovDet": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0, 0, 0]
                  },
                  {
                    "name": "correct_covariance",
                    "updates": [0]
                  },
                  {
                    "name": "reweight_covariance",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "shrunk_covariance_": {
            "functions": [
              "shrunk_covariance",
              "ledoit_wolf_shrinkage",
              "ledoit_wolf",
              "oas"
            ],
            "types": {
              "ShrunkCovariance": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "LedoitWolf": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "OAS": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "EmpiricalCovariance": {
            "methods": [
              "get_precision",
              {
                "name": "fit",
                "updates": [0]
              },
              "score",
              "error_norm",
              "mahalanobis"
            ]
          },
          "ShrunkCovariance": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "LedoitWolf": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "OAS": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MinCovDet": {
            "methods": [
              {
                "name": "fit",
                "updates": [0, 0, 0]
              },
              {
                "name": "correct_covariance",
                "updates": [0]
              },
              {
                "name": "reweight_covariance",
                "updates": [0]
              }
            ]
          },
          "GraphLasso": {
            "methods": []
          },
          "GraphLassoCV": {
            "methods": []
          },
          "GraphicalLasso": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "GraphicalLassoCV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "EllipticEnvelope": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "decision_function",
              "score_samples",
              "predict",
              "score"
            ]
          }
        },
        "functions": [
          "empirical_covariance",
          "log_likelihood",
          "shrunk_covariance",
          "ledoit_wolf",
          "ledoit_wolf_shrinkage",
          "oas",
          "fast_mcd",
          "graphical_lasso"
        ]
      },
      "cross_decomposition": {
        "modules": {
          "tests": {
            "modules": {
              "test_pls": {
                "functions": [
                  "test_pls",
                  "test_convergence_fail",
                  "test_PLSSVD",
                  "test_univariate_pls_regression",
                  "test_predict_transform_copy",
                  "test_scale_and_stability",
                  "test_pls_errors"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "cca_": {
            "functions": [],
            "types": {
              "CCA": {
                "methods": []
              }
            }
          },
          "pls_": {
            "functions": [],
            "types": {
              "PLSRegression": {
                "methods": []
              },
              "PLSCanonical": {
                "methods": []
              },
              "PLSSVD": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {},
        "functions": []
      },
      "datasets": {
        "modules": {
          "data": {
            "modules": {},
            "types": {},
            "functions": []
          },
          "descr": {
            "modules": {},
            "types": {},
            "functions": []
          },
          "images": {
            "modules": {},
            "types": {},
            "functions": []
          },
          "tests": {
            "modules": {
              "data": {
                "modules": {
                  "openml": {
                    "modules": {
                      "1": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "2": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "3": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "61": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "292": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "561": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "1119": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "40589": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "40675": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "40945": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      },
                      "40966": {
                        "modules": {},
                        "types": {},
                        "functions": []
                      }
                    },
                    "types": {},
                    "functions": []
                  }
                },
                "types": {},
                "functions": []
              },
              "test_20news": {
                "functions": [
                  "test_20news",
                  "test_20news_length_consistency",
                  "test_20news_vectorized"
                ],
                "types": {}
              },
              "test_base": {
                "functions": [
                  "test_data_home",
                  "test_default_empty_load_files",
                  "test_default_load_files",
                  "test_load_files_w_categories_desc_and_encoding",
                  "test_load_files_wo_load_content",
                  "test_load_sample_images",
                  "test_load_digits",
                  "test_load_digits_n_class_lt_10",
                  "test_load_sample_image",
                  "test_load_missing_sample_image_error",
                  "test_load_diabetes",
                  "test_load_linnerud",
                  "test_load_iris",
                  "test_load_wine",
                  "test_load_breast_cancer",
                  "test_load_boston",
                  "test_loads_dumps_bunch",
                  "test_bunch_pickle_generated_with_0_16_and_read_with_0_17",
                  "test_bunch_dir",
                  "test_refresh_cache"
                ],
                "types": {}
              },
              "test_california_housing": {
                "functions": ["fetch", "test_fetch"],
                "types": {}
              },
              "test_common": {
                "functions": ["check_return_X_y"],
                "types": {}
              },
              "test_covtype": {
                "functions": ["fetch", "test_fetch"],
                "types": {}
              },
              "test_kddcup99": {
                "functions": ["test_percent10", "test_shuffle"],
                "types": {}
              },
              "test_lfw": {
                "functions": [
                  "setup_module",
                  "teardown_module",
                  "test_load_empty_lfw_people",
                  "test_load_fake_lfw_people",
                  "test_load_fake_lfw_people_too_restrictive",
                  "test_load_empty_lfw_pairs",
                  "test_load_fake_lfw_pairs"
                ],
                "types": {}
              },
              "test_mldata": {
                "functions": [],
                "types": {}
              },
              "test_openml": {
                "functions": [
                  "test_decode_iris",
                  "test_decode_anneal",
                  "test_decode_cpu",
                  "test_decode_emotions",
                  "test_retry_with_clean_cache",
                  "test_retry_with_clean_cache_http_error",
                  "test_fetch_openml_raises_illegal_argument"
                ],
                "types": {
                  "MockHTTPResponse": {
                    "methods": ["read", "tell", "seek", "close", "info"]
                  }
                }
              },
              "test_rcv1": {
                "functions": ["test_fetch_rcv1"],
                "types": {}
              },
              "test_samples_generator": {
                "functions": [
                  "test_make_classification",
                  "test_make_classification_informative_features",
                  "test_make_multilabel_classification_return_sequences",
                  "test_make_multilabel_classification_return_indicator",
                  "test_make_multilabel_classification_return_indicator_sparse",
                  "test_make_hastie_10_2",
                  "test_make_regression",
                  "test_make_regression_multitarget",
                  "test_make_blobs",
                  "test_make_blobs_n_samples_list",
                  "test_make_blobs_n_samples_list_with_centers",
                  "test_make_blobs_error",
                  "test_make_friedman1",
                  "test_make_friedman2",
                  "test_make_friedman3",
                  "test_make_low_rank_matrix",
                  "test_make_sparse_coded_signal",
                  "test_make_sparse_uncorrelated",
                  "test_make_spd_matrix",
                  "test_make_swiss_roll",
                  "test_make_s_curve",
                  "test_make_biclusters",
                  "test_make_checkerboard",
                  "test_make_moons",
                  "test_make_circles"
                ],
                "types": {}
              },
              "test_svmlight_format": {
                "functions": [
                  "test_load_svmlight_file",
                  "test_load_svmlight_file_fd",
                  "test_load_svmlight_file_multilabel",
                  "test_load_svmlight_files",
                  "test_load_svmlight_file_n_features",
                  "test_load_compressed",
                  "test_load_invalid_file",
                  "test_load_invalid_order_file",
                  "test_load_zero_based",
                  "test_load_zero_based_auto",
                  "test_load_with_qid",
                  "test_load_invalid_file2",
                  "test_not_a_filename",
                  "test_invalid_filename",
                  "test_dump",
                  "test_dump_multilabel",
                  "test_dump_concise",
                  "test_dump_comment",
                  "test_dump_invalid",
                  "test_dump_query_id",
                  "test_load_with_long_qid",
                  "test_load_zeros",
                  "test_load_offset_exhaustive_splits",
                  "test_load_with_offsets_error"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [
              "get_data_home",
              "clear_data_home",
              "load_files",
              "load_data",
              "load_wine",
              "load_iris",
              "load_breast_cancer",
              "load_digits",
              "load_diabetes",
              "load_linnerud",
              "load_boston",
              "load_sample_images",
              "load_sample_image"
            ],
            "types": {}
          },
          "california_housing": {
            "functions": ["fetch_california_housing"],
            "types": {}
          },
          "covtype": {
            "functions": ["fetch_covtype"],
            "types": {}
          },
          "kddcup99": {
            "functions": ["fetch_kddcup99"],
            "types": {}
          },
          "lfw": {
            "functions": ["fetch_lfw_people", "fetch_lfw_pairs"],
            "types": {}
          },
          "mldata": {
            "functions": ["setup_module", "teardown_module"],
            "types": {}
          },
          "olivetti_faces": {
            "functions": ["fetch_olivetti_faces"],
            "types": {}
          },
          "openml": {
            "functions": ["fetch_openml"],
            "types": {}
          },
          "rcv1": {
            "functions": ["fetch_rcv1"],
            "types": {}
          },
          "samples_generator": {
            "functions": [
              {
                "name": "make_classification",
                "updates": [7]
              },
              "make_multilabel_classification",
              "make_hastie_10_2",
              "make_regression",
              "make_circles",
              "make_moons",
              "make_blobs",
              "make_friedman1",
              "make_friedman2",
              "make_friedman3",
              "make_low_rank_matrix",
              "make_sparse_coded_signal",
              "make_sparse_uncorrelated",
              "make_spd_matrix",
              "make_sparse_spd_matrix",
              "make_swiss_roll",
              "make_s_curve",
              "make_gaussian_quantiles",
              "make_biclusters",
              "make_checkerboard"
            ],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "species_distributions": {
            "functions": ["construct_grids", "fetch_species_distributions"],
            "types": {}
          },
          "svmlight_format": {
            "functions": [
              "load_svmlight_file",
              "load_svmlight_files",
              "dump_svmlight_file"
            ],
            "types": {}
          },
          "twenty_newsgroups": {
            "functions": [
              "strip_newsgroup_header",
              "strip_newsgroup_quoting",
              "strip_newsgroup_footer",
              "fetch_20newsgroups",
              "fetch_20newsgroups_vectorized"
            ],
            "types": {}
          }
        },
        "types": {},
        "functions": [
          "load_breast_cancer",
          "load_boston",
          "load_diabetes",
          "load_digits",
          "load_files",
          "load_iris",
          "load_linnerud",
          "load_sample_images",
          "load_sample_image",
          "load_wine",
          "get_data_home",
          "clear_data_home",
          "fetch_covtype",
          "fetch_kddcup99",
          "fetch_lfw_pairs",
          "fetch_lfw_people",
          "fetch_20newsgroups",
          "fetch_20newsgroups_vectorized",
          "fetch_openml",
          {
            "name": "make_classification",
            "updates": [7]
          },
          "make_multilabel_classification",
          "make_hastie_10_2",
          "make_regression",
          "make_blobs",
          "make_moons",
          "make_circles",
          "make_friedman1",
          "make_friedman2",
          "make_friedman3",
          "make_low_rank_matrix",
          "make_sparse_coded_signal",
          "make_sparse_uncorrelated",
          "make_spd_matrix",
          "make_swiss_roll",
          "make_s_curve",
          "make_sparse_spd_matrix",
          "make_gaussian_quantiles",
          "make_biclusters",
          "make_checkerboard",
          "load_svmlight_file",
          "load_svmlight_files",
          "dump_svmlight_file",
          "fetch_olivetti_faces",
          "fetch_species_distributions",
          "fetch_california_housing",
          "fetch_rcv1"
        ]
      },
      "decomposition": {
        "modules": {
          "tests": {
            "modules": {
              "test_dict_learning": {
                "functions": [
                  "test_sparse_encode_shapes_omp",
                  "test_dict_learning_shapes",
                  "test_dict_learning_overcomplete",
                  "test_dict_learning_reconstruction",
                  "test_dict_learning_reconstruction_parallel",
                  "test_dict_learning_lassocd_readonly_data",
                  "test_dict_learning_nonzero_coefs",
                  "test_dict_learning_unknown_fit_algorithm",
                  "test_dict_learning_split",
                  "test_dict_learning_online_shapes",
                  "test_dict_learning_online_verbosity",
                  "test_dict_learning_online_estimator_shapes",
                  "test_dict_learning_online_overcomplete",
                  "test_dict_learning_online_initialization",
                  "test_dict_learning_online_readonly_initialization",
                  "test_dict_learning_online_partial_fit",
                  "test_sparse_encode_shapes",
                  "test_sparse_encode_input",
                  "test_sparse_encode_error",
                  "test_sparse_encode_error_default_sparsity",
                  "test_unknown_method",
                  "test_sparse_coder_estimator",
                  "test_sparse_coder_parallel_mmap"
                ],
                "types": {}
              },
              "test_factor_analysis": {
                "functions": [],
                "types": {}
              },
              "test_fastica": {
                "functions": [
                  "center_and_norm",
                  "test_gs",
                  "test_fastica_nowhiten",
                  "test_fastica_convergence_fail",
                  "test_non_square_fastica",
                  "test_fit_transform",
                  "test_inverse_transform",
                  "test_fastica_errors"
                ],
                "types": {}
              },
              "test_incremental_pca": {
                "functions": [
                  "test_incremental_pca",
                  "test_incremental_pca_check_projection",
                  "test_incremental_pca_inverse",
                  "test_incremental_pca_validation",
                  "test_n_components_none",
                  "test_incremental_pca_set_params",
                  "test_incremental_pca_num_features_change",
                  "test_incremental_pca_batch_signs",
                  "test_incremental_pca_batch_values",
                  "test_incremental_pca_batch_rank",
                  "test_incremental_pca_partial_fit",
                  "test_incremental_pca_against_pca_iris",
                  "test_incremental_pca_against_pca_random_data",
                  "test_explained_variances",
                  "test_singular_values",
                  "test_whitening",
                  "test_incremental_pca_partial_fit_float_division"
                ],
                "types": {}
              },
              "test_kernel_pca": {
                "functions": [
                  "test_kernel_pca",
                  "test_kernel_pca_invalid_parameters",
                  "test_kernel_pca_consistent_transform",
                  "test_kernel_pca_deterministic_output",
                  "test_kernel_pca_sparse",
                  "test_kernel_pca_linear_kernel",
                  "test_kernel_pca_n_components",
                  "test_remove_zero_eig",
                  "test_leave_zero_eig",
                  "test_kernel_pca_precomputed",
                  "test_kernel_pca_invalid_kernel"
                ],
                "types": {}
              },
              "test_nmf": {
                "functions": [
                  "test_initialize_nn_output",
                  "test_parameter_checking",
                  "test_initialize_close",
                  "test_initialize_variants",
                  "test_nmf_transform_custom_init",
                  "test_n_components_greater_n_features",
                  "test_nmf_sparse_input",
                  "test_nmf_sparse_transform",
                  "test_non_negative_factorization_consistency",
                  "test_non_negative_factorization_checking",
                  "test_beta_divergence",
                  "test_special_sparse_dot",
                  "test_nmf_negative_beta_loss",
                  "test_nmf_regularization",
                  "test_nmf_underflow"
                ],
                "types": {}
              },
              "test_online_lda": {
                "functions": [
                  "test_lda_default_prior_params",
                  "test_lda_fit_batch",
                  "test_lda_fit_online",
                  "test_lda_partial_fit",
                  "test_lda_dense_input",
                  "test_lda_transform",
                  "test_lda_partial_fit_dim_mismatch",
                  "test_invalid_params",
                  "test_lda_negative_input",
                  "test_lda_no_component_error",
                  "test_lda_transform_mismatch",
                  "test_lda_preplexity_mismatch",
                  "test_perplexity_input_format",
                  "test_lda_score_perplexity",
                  "test_lda_fit_perplexity",
                  "test_lda_empty_docs",
                  "test_dirichlet_expectation",
                  "check_verbosity"
                ],
                "types": {}
              },
              "test_pca": {
                "functions": [
                  "test_pca",
                  "test_pca_arpack_solver",
                  "test_pca_randomized_solver",
                  "test_no_empty_slice_warning",
                  "test_whitening",
                  "test_singular_values",
                  "test_pca_check_projection",
                  "test_pca_inverse",
                  "test_randomized_pca_check_projection",
                  "test_randomized_pca_check_list",
                  "test_randomized_pca_inverse",
                  "test_n_components_mle",
                  "test_pca_dim",
                  "test_infer_dim_1",
                  "test_infer_dim_2",
                  "test_infer_dim_3",
                  "test_infer_dim_by_explained_variance",
                  "test_pca_score",
                  "test_pca_score2",
                  "test_pca_score3",
                  "test_pca_score_with_different_solvers",
                  "test_pca_zero_noise_variance_edge_cases",
                  "test_svd_solver_auto",
                  "test_pca_bad_solver",
                  "test_pca_deterministic_output",
                  "check_pca_float_dtype_preservation",
                  "check_pca_int_dtype_upcast_to_double"
                ],
                "types": {}
              },
              "test_sparse_pca": {
                "functions": [
                  "generate_toy_data",
                  "test_scaling_fit_transform",
                  "test_pca_vs_spca"
                ],
                "types": {}
              },
              "test_truncated_svd": {
                "functions": [
                  "test_algorithms",
                  "test_attributes",
                  "test_integers",
                  "test_explained_variance",
                  "test_singular_values",
                  "test_truncated_svd_eq_pca"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {}
          },
          "dict_learning": {
            "functions": [
              "sparse_encode",
              "dict_learning",
              "dict_learning_online"
            ],
            "types": {
              "SparseCodingMixin": {
                "methods": ["transform"]
              },
              "SparseCoder": {
                "methods": ["fit"]
              },
              "DictionaryLearning": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "MiniBatchDictionaryLearning": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "factor_analysis": {
            "functions": [],
            "types": {
              "FactorAnalysis": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  "get_covariance",
                  "get_precision",
                  "score_samples",
                  "score"
                ]
              }
            }
          },
          "fastica_": {
            "functions": ["fastica"],
            "types": {
              "FastICA": {
                "methods": [
                  "fit_transform",
                  "fit",
                  "transform",
                  "inverse_transform"
                ]
              }
            }
          },
          "incremental_pca": {
            "functions": [],
            "types": {
              "IncrementalPCA": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0, 0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "kernel_pca": {
            "functions": [],
            "types": {
              "KernelPCA": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              }
            }
          },
          "nmf": {
            "functions": ["norm", "trace_dot", "non_negative_factorization"],
            "types": {
              "NMF": {
                "methods": [
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              }
            }
          },
          "online_lda": {
            "functions": [],
            "types": {
              "LatentDirichletAllocation": {
                "methods": [
                  "partial_fit",
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  "score",
                  "perplexity"
                ]
              }
            }
          },
          "pca": {
            "functions": [],
            "types": {
              "PCA": {
                "methods": ["fit", "fit_transform", "score_samples", "score"]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "sparse_pca": {
            "functions": [],
            "types": {
              "SparsePCA": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform"
                ]
              },
              "MiniBatchSparsePCA": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "truncated_svd": {
            "functions": [],
            "types": {
              "TruncatedSVD": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              }
            }
          }
        },
        "types": {
          "NMF": {
            "methods": [
              {
                "name": "fit_transform",
                "updates": [0]
              },
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "PCA": {
            "methods": ["fit", "fit_transform", "score_samples", "score"]
          },
          "IncrementalPCA": {
            "methods": [
              {
                "name": "fit",
                "updates": [0, 0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              }
            ]
          },
          "KernelPCA": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "SparsePCA": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "MiniBatchSparsePCA": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "TruncatedSVD": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "FastICA": {
            "methods": [
              "fit_transform",
              "fit",
              "transform",
              "inverse_transform"
            ]
          },
          "DictionaryLearning": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MiniBatchDictionaryLearning": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              }
            ]
          },
          "SparseCoder": {
            "methods": ["fit"]
          },
          "FactorAnalysis": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "get_covariance",
              "get_precision",
              "score_samples",
              "score"
            ]
          },
          "LatentDirichletAllocation": {
            "methods": [
              "partial_fit",
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "score",
              "perplexity"
            ]
          }
        },
        "functions": [
          "non_negative_factorization",
          "fastica",
          "dict_learning",
          "dict_learning_online",
          "sparse_encode"
        ]
      },
      "ensemble": {
        "modules": {
          "tests": {
            "modules": {
              "test_bagging": {
                "functions": [
                  "test_classification",
                  "test_sparse_classification",
                  "test_regression",
                  "test_sparse_regression",
                  "test_bootstrap_samples",
                  "test_bootstrap_features",
                  "test_oob_score_classification",
                  "test_oob_score_regression",
                  "test_single_estimator",
                  "test_error",
                  "test_parallel_classification",
                  "test_parallel_regression",
                  "test_base_estimator",
                  "test_bagging_with_pipeline",
                  "test_bagging_sample_weight_unsupported_but_passed",
                  "test_warm_start",
                  "test_warm_start_smaller_n_estimators",
                  "test_warm_start_equal_n_estimators",
                  "test_warm_start_equivalence",
                  "test_warm_start_with_oob_score_fails",
                  "test_oob_score_removed_on_warm_start",
                  "test_oob_score_consistency",
                  "test_max_samples_consistency",
                  "test_set_oob_score_label_encoding",
                  {
                    "name": "replace",
                    "updates": [0]
                  },
                  "test_bagging_regressor_with_missing_inputs",
                  "test_bagging_classifier_with_missing_inputs"
                ],
                "types": {
                  "CustomSVC": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "CustomSVR": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "DummySizeEstimator": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "DummyZeroEstimator": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict"
                    ]
                  }
                }
              },
              "test_base": {
                "functions": [
                  "test_base",
                  "test_base_zero_n_estimators",
                  "test_base_not_int_n_estimators",
                  "test_set_random_states"
                ],
                "types": {
                  "AlphaParamPipeline": {
                    "methods": ["get_params"]
                  },
                  "RevParamPipeline": {
                    "methods": ["get_params"]
                  }
                }
              },
              "test_forest": {
                "functions": [
                  "check_classification_toy",
                  "check_iris_criterion",
                  "check_boston_criterion",
                  "check_regressor_attributes",
                  "check_probability",
                  "check_importances",
                  "test_importances_asymptotic",
                  "check_unfitted_feature_importances",
                  "check_oob_score",
                  "check_oob_score_raise_error",
                  "check_gridsearch",
                  "check_parallel",
                  "check_pickle",
                  "check_multioutput",
                  "check_classes_shape",
                  "test_random_trees_dense_type",
                  "test_random_trees_dense_equal",
                  "test_random_hasher_sparse_data",
                  "test_parallel_train",
                  "test_distribution",
                  "check_max_leaf_nodes_max_depth",
                  "check_min_samples_split",
                  "check_min_samples_leaf",
                  "check_min_weight_fraction_leaf",
                  "check_sparse_input",
                  "check_memory_layout",
                  "check_class_weights",
                  "check_class_weight_balanced_and_bootstrap_multi_output",
                  "check_class_weight_errors",
                  "check_warm_start",
                  "check_warm_start_clear",
                  "check_warm_start_smaller_n_estimators",
                  "check_warm_start_equal_n_estimators",
                  "check_warm_start_oob",
                  "check_decision_path",
                  "test_forest_feature_importances_sum",
                  "test_forest_degenerate_feature_importances"
                ],
                "types": {
                  "MyBackend": {
                    "methods": [
                      {
                        "name": "start_call",
                        "updates": [0]
                      }
                    ]
                  }
                }
              },
              "test_gradient_boosting": {
                "functions": [
                  "check_classification_toy",
                  "test_classifier_parameter_checks",
                  "test_regressor_parameter_checks",
                  "test_loss_function",
                  "check_classification_synthetic",
                  "check_boston",
                  "check_iris",
                  "test_regression_synthetic",
                  "test_feature_importances",
                  "test_probability_log",
                  "test_check_inputs",
                  "test_check_inputs_predict",
                  "test_check_inputs_predict_stages",
                  "test_check_max_features",
                  "test_max_feature_regression",
                  "test_max_feature_auto",
                  "test_staged_predict",
                  "test_staged_predict_proba",
                  "test_serialization",
                  "test_degenerate_targets",
                  "test_quantile_loss",
                  "test_symbol_labels",
                  "test_float_class_labels",
                  "test_shape_y",
                  "test_mem_layout",
                  "test_oob_improvement",
                  "test_oob_improvement_raise",
                  "test_oob_multilcass_iris",
                  "test_verbose_output",
                  "test_more_verbose_output",
                  "early_stopping_monitor",
                  "test_complete_classification",
                  "test_complete_regression",
                  "test_zero_estimator_reg",
                  "test_zero_estimator_clf",
                  "test_warm_start_wo_nestimators_change",
                  "test_probability_exponential",
                  "test_non_uniform_weights_toy_edge_case_reg",
                  "test_non_uniform_weights_toy_edge_case_clf",
                  "check_sparse_input",
                  "test_gradient_boosting_early_stopping",
                  "test_gradient_boosting_validation_fraction",
                  "test_early_stopping_stratified",
                  "test_gradient_boosting_with_init_pipeline",
                  "test_early_stopping_n_classes",
                  "test_gbr_degenerate_feature_importances"
                ],
                "types": {}
              },
              "test_gradient_boosting_loss_functions": {
                "functions": [
                  "test_binomial_deviance",
                  "test_sample_weight_smoke",
                  "test_sample_weight_init_estimators",
                  "test_weighted_percentile",
                  "test_weighted_percentile_equal",
                  "test_weighted_percentile_zero_weight",
                  "test_quantile_loss_function",
                  "test_sample_weight_deviance",
                  "test_init_raw_predictions_shapes",
                  "test_init_raw_predictions_values"
                ],
                "types": {}
              },
              "test_iforest": {
                "functions": ["test_iforest_average_path_length"],
                "types": {}
              },
              "test_partial_dependence": {
                "functions": [],
                "types": {}
              },
              "test_voting": {
                "functions": [
                  "test_weights_regressor",
                  "test_multilabel",
                  "test_sample_weight_kwargs"
                ],
                "types": {
                  "ClassifierErrorFit": {
                    "methods": ["fit"]
                  },
                  "MockClassifier": {
                    "methods": ["fit"]
                  }
                }
              },
              "test_weight_boosting": {
                "functions": [
                  "test_samme_proba",
                  "test_oneclass_adaboost_proba",
                  "test_classification_toy",
                  "test_regression_toy",
                  "test_iris",
                  "test_boston",
                  "test_staged_predict",
                  "test_pickle",
                  "test_importances",
                  "test_error",
                  "test_sample_weight_missing",
                  "test_sparse_classification",
                  "test_sparse_regression",
                  "test_sample_weight_adaboost_regressor",
                  "test_multidimensional_X"
                ],
                "types": {
                  "MockEstimator": {
                    "methods": ["predict_proba"]
                  },
                  "CustomSVC": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "CustomSVR": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "DummyEstimator": {
                    "methods": ["fit", "predict"]
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "bagging": {
            "functions": [],
            "types": {
              "BaseBagging": {
                "methods": ["fit"]
              },
              "BaggingClassifier": {
                "methods": ["predict", "predict_proba", "predict_log_proba"]
              },
              "BaggingRegressor": {
                "methods": ["predict"]
              }
            }
          },
          "base": {
            "functions": [],
            "types": {
              "BaseEnsemble": {
                "methods": []
              }
            }
          },
          "forest": {},
          "gradient_boosting": {},
          "iforest": {
            "functions": [],
            "types": {
              "IsolationForest": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "decision_function",
                  "score_samples"
                ]
              }
            }
          },
          "partial_dependence": {
            "functions": [],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "voting": {
            "functions": [],
            "types": {
              "VotingClassifier": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "transform"
                ]
              },
              "VotingRegressor": {
                "methods": ["fit", "predict", "transform"]
              }
            }
          },
          "weight_boosting": {
            "functions": [],
            "types": {
              "BaseWeightBoosting": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0, 3]
                  },
                  "staged_score"
                ]
              },
              "AdaBoostClassifier": {
                "methods": [
                  "fit",
                  "predict",
                  "staged_predict",
                  "decision_function",
                  "staged_decision_function",
                  "predict_proba",
                  "staged_predict_proba",
                  "predict_log_proba"
                ]
              },
              "AdaBoostRegressor": {
                "methods": ["fit", "predict", "staged_predict"]
              }
            }
          }
        },
        "types": {
          "BaseEnsemble": {
            "methods": []
          },
          "BaggingClassifier": {
            "methods": ["predict", "predict_proba", "predict_log_proba"]
          },
          "BaggingRegressor": {
            "methods": ["predict"]
          },
          "IsolationForest": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "decision_function",
              "score_samples"
            ]
          },
          "AdaBoostClassifier": {
            "methods": [
              "fit",
              "predict",
              "staged_predict",
              "decision_function",
              "staged_decision_function",
              "predict_proba",
              "staged_predict_proba",
              "predict_log_proba"
            ]
          },
          "AdaBoostRegressor": {
            "methods": ["fit", "predict", "staged_predict"]
          },
          "VotingClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "transform"
            ]
          },
          "VotingRegressor": {
            "methods": ["fit", "predict", "transform"]
          }
        },
        "functions": []
      },
      "experimental": {
        "modules": {
          "tests": {
            "modules": {
              "test_enable_hist_gradient_boosting": {
                "functions": ["test_imports_strategies"],
                "types": {}
              },
              "test_enable_iterative_imputer": {
                "functions": ["test_imports_strategies"],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "enable_hist_gradient_boosting": {
            "functions": [],
            "types": {}
          },
          "enable_iterative_imputer": {
            "functions": [],
            "types": {}
          }
        },
        "types": {},
        "functions": []
      },
      "externals": {
        "modules": {
          "joblib": {
            "modules": {
              "numpy_pickle": {
                "functions": [],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "conftest": {
            "functions": ["pytest_ignore_collect"],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "six": {
            "functions": [
              "add_move",
              "remove_move",
              "iterkeys",
              "itervalues",
              "iteritems",
              "iterlists",
              "with_metaclass",
              "add_metaclass"
            ],
            "types": {
              "X": {
                "methods": []
              },
              "MovedModule": {
                "methods": []
              },
              "MovedAttribute": {
                "methods": []
              },
              "Module_six_moves_urllib_parse": {
                "methods": []
              },
              "Module_six_moves_urllib_error": {
                "methods": []
              },
              "Module_six_moves_urllib_request": {
                "methods": []
              },
              "Module_six_moves_urllib_response": {
                "methods": []
              },
              "Module_six_moves_urllib_robotparser": {
                "methods": []
              },
              "Module_six_moves_urllib": {
                "methods": []
              },
              "Iterator": {
                "methods": ["next"]
              }
            }
          }
        },
        "types": {},
        "functions": []
      },
      "feature_extraction": {
        "modules": {
          "tests": {
            "modules": {
              "test_dict_vectorizer": {
                "functions": [
                  "test_feature_selection",
                  "test_one_of_k",
                  "test_unseen_or_no_features",
                  "test_deterministic_vocabulary"
                ],
                "types": {}
              },
              "test_feature_hasher": {
                "functions": [
                  "test_feature_hasher_dicts",
                  "test_feature_hasher_strings",
                  "test_feature_hasher_pairs",
                  "test_feature_hasher_pairs_with_string_values",
                  "test_hash_empty_input",
                  "test_hasher_invalid_input",
                  "test_hasher_set_params",
                  "test_hasher_zeros",
                  "test_hash_collisions"
                ],
                "types": {}
              },
              "test_image": {
                "functions": [
                  "test_img_to_graph",
                  "test_grid_to_graph",
                  "test_extract_patches_all",
                  "test_extract_patches_all_color",
                  "test_extract_patches_all_rect",
                  "test_extract_patches_max_patches",
                  "test_extract_patch_same_size_image",
                  "test_extract_patches_less_than_max_patches",
                  "test_reconstruct_patches_perfect",
                  "test_reconstruct_patches_perfect_color",
                  "test_patch_extractor_fit",
                  "test_patch_extractor_max_patches",
                  "test_patch_extractor_max_patches_default",
                  "test_patch_extractor_all_patches",
                  "test_patch_extractor_color",
                  "test_extract_patches_strided",
                  "test_extract_patches_square",
                  "test_width_patch"
                ],
                "types": {}
              },
              "test_text": {
                "functions": [
                  "uppercase",
                  "strip_eacute",
                  "split_tokenize",
                  "lazy_analyze",
                  "test_strip_accents",
                  "test_to_ascii",
                  "test_word_analyzer_unigrams_and_bigrams",
                  "test_unicode_decode_error",
                  "test_char_ngram_analyzer",
                  "test_char_wb_ngram_analyzer",
                  "test_word_ngram_analyzer",
                  "test_countvectorizer_custom_vocabulary",
                  "test_countvectorizer_custom_vocabulary_pipeline",
                  "test_countvectorizer_custom_vocabulary_repeated_indices",
                  "test_countvectorizer_custom_vocabulary_gap_index",
                  "test_countvectorizer_stop_words",
                  "test_countvectorizer_empty_vocabulary",
                  "test_fit_countvectorizer_twice",
                  "test_tf_idf_smoothing",
                  "test_tfidf_no_smoothing",
                  "test_sublinear_tf",
                  "test_vectorizer",
                  "test_tfidf_vectorizer_setters",
                  "test_feature_names",
                  "test_count_vectorizer_max_features",
                  "test_vectorizer_max_df",
                  "test_vectorizer_min_df",
                  "test_count_binary_occurrences",
                  "test_vectorizer_pipeline_cross_validation",
                  "test_tfidf_vectorizer_with_fixed_vocabulary",
                  "test_pickling_vectorizer",
                  "test_countvectorizer_vocab_sets_when_pickling",
                  "test_countvectorizer_vocab_dicts_when_pickling",
                  "test_stop_words_removal",
                  "test_pickling_transformer",
                  "test_transformer_idf_setter",
                  "test_tfidf_vectorizer_setter",
                  "test_tfidfvectorizer_invalid_idf_attr",
                  "test_non_unique_vocab",
                  "test_tfidfvectorizer_binary",
                  "test_tfidfvectorizer_export_idf",
                  "test_vectorizer_vocab_clone",
                  "test_tfidf_transformer_sparse"
                ],
                "types": {
                  "CustomEstimator": {
                    "methods": ["build_preprocessor"]
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "dict_vectorizer": {
            "functions": [],
            "types": {
              "DictVectorizer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "fit_transform",
                  "inverse_transform",
                  "transform",
                  "get_feature_names",
                  {
                    "name": "restrict",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "hashing": {
            "functions": [],
            "types": {
              "FeatureHasher": {
                "methods": ["fit", "transform"]
              }
            }
          },
          "image": {
            "functions": [
              "img_to_graph",
              "grid_to_graph",
              "extract_patches",
              "extract_patches_2d",
              "reconstruct_from_patches_2d"
            ],
            "types": {
              "PatchExtractor": {
                "methods": [
                  "fit",
                  {
                    "name": "transform",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "stop_words": {
            "functions": [],
            "types": {}
          },
          "text": {
            "functions": [
              "strip_accents_unicode",
              "strip_accents_ascii",
              "strip_tags"
            ],
            "types": {
              "VectorizerMixin": {
                "methods": [
                  "decode",
                  "build_preprocessor",
                  "build_tokenizer",
                  "get_stop_words",
                  "build_analyzer"
                ]
              },
              "HashingVectorizer": {
                "methods": ["partial_fit", "fit", "transform", "fit_transform"]
              },
              "CountVectorizer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform",
                  "get_feature_names"
                ]
              },
              "TfidfTransformer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "transform",
                    "updates": [1]
                  }
                ]
              },
              "TfidfVectorizer": {
                "methods": ["fit", "fit_transform", "transform"]
              }
            }
          }
        },
        "types": {
          "DictVectorizer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "fit_transform",
              "inverse_transform",
              "transform",
              "get_feature_names",
              {
                "name": "restrict",
                "updates": [0]
              }
            ]
          },
          "FeatureHasher": {
            "methods": ["fit", "transform"]
          }
        },
        "functions": ["img_to_graph", "grid_to_graph"]
      },
      "feature_selection": {
        "modules": {
          "tests": {
            "modules": {
              "test_base": {
                "functions": [
                  "test_transform_dense",
                  "test_transform_sparse",
                  "test_inverse_transform_dense",
                  "test_inverse_transform_sparse",
                  "test_get_support"
                ],
                "types": {
                  "StepSelector": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  }
                }
              },
              "test_chi2": {
                "functions": [
                  "mkchi2",
                  "test_chi2",
                  "test_chi2_coo",
                  "test_chi2_negative",
                  "test_chi2_unused_feature",
                  "test_chisquare"
                ],
                "types": {}
              },
              "test_feature_select": {
                "functions": [
                  "test_f_oneway_vs_scipy_stats",
                  "test_f_oneway_ints",
                  "test_f_classif",
                  "test_f_regression",
                  "test_f_regression_input_dtype",
                  "test_f_regression_center",
                  "test_f_classif_multi_class",
                  "test_select_percentile_classif",
                  "test_select_percentile_classif_sparse",
                  "test_select_kbest_classif",
                  "test_select_kbest_all",
                  "test_select_kbest_zero",
                  "test_select_heuristics_classif",
                  "assert_best_scores_kept",
                  "test_select_percentile_regression",
                  "test_select_percentile_regression_full",
                  "test_invalid_percentile",
                  "test_select_kbest_regression",
                  "test_select_heuristics_regression",
                  "test_boundary_case_ch2",
                  "test_select_fdr_regression",
                  "test_select_fwe_regression",
                  "test_selectkbest_tiebreaking",
                  "test_selectpercentile_tiebreaking",
                  "test_tied_pvalues",
                  "test_scorefunc_multilabel",
                  "test_tied_scores",
                  "test_nans",
                  "test_score_func_error",
                  "test_invalid_k",
                  "test_f_classif_constant_feature",
                  "test_no_feature_selected",
                  "test_mutual_info_classif",
                  "test_mutual_info_regression"
                ],
                "types": {}
              },
              "test_from_model": {
                "functions": [
                  "test_max_features",
                  "test_max_features_tiebreak",
                  "test_threshold_and_max_features",
                  "test_coef_default_threshold",
                  "test_calling_fit_reinitializes",
                  "test_threshold_string"
                ],
                "types": {
                  "FixedImportanceEstimator": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  }
                }
              },
              "test_mutual_info": {
                "functions": [
                  "test_compute_mi_dd",
                  "test_compute_mi_cc",
                  "test_compute_mi_cd",
                  "test_compute_mi_cd_unique_label",
                  "test_mutual_info_classif_discrete",
                  "test_mutual_info_regression",
                  "test_mutual_info_classif_mixed",
                  "test_mutual_info_options"
                ],
                "types": {}
              },
              "test_rfe": {
                "functions": [
                  "test_rfe_features_importance",
                  "test_rfe",
                  "test_rfe_mockclassifier",
                  "test_rfecv",
                  "test_rfecv_mockclassifier",
                  "test_rfecv_verbose_output",
                  "test_rfecv_grid_scores_size",
                  "test_rfe_min_step",
                  "test_number_of_subsets_of_features"
                ],
                "types": {
                  "MockClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "score",
                      "get_params",
                      "set_params"
                    ]
                  }
                }
              },
              "test_variance_threshold": {
                "functions": ["test_zero_variance", "test_variance_threshold"],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {
              "SelectorMixin": {
                "methods": ["get_support", "transform", "inverse_transform"]
              }
            }
          },
          "from_model": {
            "functions": [],
            "types": {
              "SelectFromModel": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "mutual_info_": {
            "functions": ["mutual_info_regression", "mutual_info_classif"],
            "types": {}
          },
          "rfe": {
            "functions": [],
            "types": {
              "RFE": {
                "methods": ["fit"]
              },
              "RFECV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "univariate_selection": {
            "functions": ["f_oneway", "f_classif", "chi2", "f_regression"],
            "types": {
              "SelectPercentile": {
                "methods": []
              },
              "SelectKBest": {
                "methods": []
              },
              "SelectFpr": {
                "methods": []
              },
              "SelectFdr": {
                "methods": []
              },
              "SelectFwe": {
                "methods": []
              },
              "GenericUnivariateSelect": {
                "methods": []
              }
            }
          },
          "variance_threshold": {
            "functions": [],
            "types": {
              "VarianceThreshold": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "SelectPercentile": {
            "methods": []
          },
          "SelectKBest": {
            "methods": []
          },
          "SelectFpr": {
            "methods": []
          },
          "SelectFdr": {
            "methods": []
          },
          "SelectFwe": {
            "methods": []
          },
          "GenericUnivariateSelect": {
            "methods": []
          },
          "VarianceThreshold": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "RFE": {
            "methods": ["fit"]
          },
          "RFECV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "SelectFromModel": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          }
        },
        "functions": [
          "chi2",
          "f_classif",
          "f_oneway",
          "f_regression",
          "mutual_info_regression",
          "mutual_info_classif"
        ]
      },
      "gaussian_process": {
        "modules": {
          "tests": {
            "modules": {
              "test_gpc": {
                "functions": ["f", "test_random_starts"],
                "types": {}
              },
              "test_gpr": {
                "functions": [
                  "f",
                  "test_no_optimizer",
                  "test_anisotropic_kernel",
                  "test_random_starts",
                  "test_y_multioutput",
                  "test_gpr_correct_error_message",
                  "test_no_fit_default_predict"
                ],
                "types": {}
              },
              "test_kernels": {
                "functions": [
                  "test_kernel_operator_commutative",
                  "test_kernel_anisotropic",
                  "check_hyperparameters_equal",
                  "test_matern_kernel"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "correlation_models": {
            "functions": [],
            "types": {}
          },
          "gpc": {
            "functions": [],
            "types": {
              "GaussianProcessClassifier": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "predict_proba",
                  "log_marginal_likelihood"
                ]
              }
            }
          },
          "gpr": {
            "functions": [],
            "types": {
              "GaussianProcessRegressor": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "predict",
                    "updates": [0]
                  },
                  {
                    "name": "sample_y",
                    "updates": [0]
                  },
                  "log_marginal_likelihood"
                ]
              }
            }
          },
          "kernels": {
            "functions": [],
            "types": {
              "Hyperparameter": {
                "methods": []
              },
              "Kernel": {
                "methods": ["get_params", "set_params", "clone_with_theta"]
              },
              "NormalizedKernelMixin": {
                "methods": ["diag"]
              },
              "StationaryKernelMixin": {
                "methods": ["is_stationary"]
              },
              "CompoundKernel": {
                "methods": ["get_params", "is_stationary", "diag"]
              },
              "KernelOperator": {
                "methods": ["get_params", "is_stationary"]
              },
              "Sum": {
                "methods": ["diag"]
              },
              "Product": {
                "methods": ["diag"]
              },
              "Exponentiation": {
                "methods": ["get_params", "diag", "is_stationary"]
              },
              "ConstantKernel": {
                "methods": ["diag"]
              },
              "WhiteKernel": {
                "methods": ["diag"]
              },
              "RBF": {
                "methods": []
              },
              "Matern": {
                "methods": []
              },
              "RationalQuadratic": {
                "methods": []
              },
              "ExpSineSquared": {
                "methods": []
              },
              "DotProduct": {
                "methods": ["diag", "is_stationary"]
              },
              "PairwiseKernel": {
                "methods": ["diag", "is_stationary"]
              }
            }
          },
          "regression_models": {
            "functions": [],
            "types": {}
          }
        },
        "types": {
          "GaussianProcessRegressor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "predict",
                "updates": [0]
              },
              {
                "name": "sample_y",
                "updates": [0]
              },
              "log_marginal_likelihood"
            ]
          },
          "GaussianProcessClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "predict_proba",
              "log_marginal_likelihood"
            ]
          }
        },
        "functions": []
      },
      "impute": {
        "modules": {
          "tests": {
            "modules": {
              "test_impute": {
                "functions": [
                  "test_imputation_shape",
                  "safe_median",
                  "safe_mean",
                  "test_imputation_mean_median",
                  "test_imputation_median_special_cases",
                  "test_imputation_most_frequent",
                  "test_imputation_constant_integer",
                  "test_imputation_copy",
                  "test_iterative_imputer_zero_iters",
                  "test_iterative_imputer_verbose",
                  "test_iterative_imputer_all_missing",
                  "test_iterative_imputer_clip",
                  "test_iterative_imputer_clip_truncnorm",
                  "test_iterative_imputer_truncated_normal_posterior",
                  "test_iterative_imputer_transform_stochasticity",
                  "test_iterative_imputer_no_missing",
                  "test_iterative_imputer_rank_one",
                  "test_iterative_imputer_additive_matrix",
                  "test_iterative_imputer_early_stopping",
                  "test_iterative_imputer_catch_warning",
                  "test_missing_indicator_string",
                  "test_missing_indicator_no_missing",
                  "test_missing_indicator_sparse_no_explicit_zeros"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          }
        },
        "types": {},
        "functions": []
      },
      "inspection": {
        "modules": {
          "tests": {
            "modules": {
              "test_partial_dependence": {
                "functions": [
                  "test_grid_from_X",
                  "test_warning_recursion_non_constant_init",
                  "test_partial_dependence_sample_weight",
                  "test_plot_partial_dependence",
                  "test_plot_partial_dependence_multiclass",
                  "test_plot_partial_dependence_multioutput",
                  "test_plot_partial_dependence_fig"
                ],
                "types": {
                  "NoPredictProbaNoDecisionFunction": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "partial_dependence": {
            "functions": ["partial_dependence", "plot_partial_dependence"],
            "types": {}
          }
        },
        "types": {},
        "functions": ["partial_dependence", "plot_partial_dependence"]
      },
      "linear_model": {
        "modules": {
          "tests": {
            "modules": {
              "test_base": {
                "functions": [
                  "test_linear_regression",
                  "test_linear_regression_sample_weights",
                  "test_raises_value_error_if_sample_weights_greater_than_1d",
                  "test_fit_intercept",
                  "test_linear_regression_sparse",
                  "test_linear_regression_multiple_outcome",
                  "test_linear_regression_sparse_multiple_outcome",
                  "test_preprocess_data",
                  "test_preprocess_data_multioutput",
                  "test_preprocess_data_weighted",
                  "test_sparse_preprocess_data_with_return_mean",
                  "test_csr_preprocess_data",
                  "test_dtype_preprocess_data",
                  "test_rescale_data",
                  "test_fused_types_make_dataset"
                ],
                "types": {}
              },
              "test_bayes": {
                "functions": [
                  "test_n_iter",
                  "test_bayesian_ridge_scores",
                  "test_bayesian_ridge_score_values",
                  "test_bayesian_ridge_parameter",
                  "test_bayesian_sample_weights",
                  "test_toy_bayesian_ridge_object",
                  "test_prediction_bayesian_ridge_ard_with_constant_input",
                  "test_std_bayesian_ridge_ard_with_constant_input",
                  "test_update_of_sigma_in_ard",
                  "test_toy_ard_object",
                  "test_ard_accuracy_on_easy_problem",
                  "test_return_std"
                ],
                "types": {}
              },
              "test_coordinate_descent": {
                "functions": [
                  "test_lasso_zero",
                  "test_lasso_toy",
                  "test_enet_toy",
                  "build_dataset",
                  "test_lasso_cv_with_some_model_selection",
                  "test_lasso_cv_positive_constraint",
                  "test_lasso_path_return_models_vs_new_return_gives_same_coefficients",
                  "test_warm_start",
                  "test_lasso_alpha_warning",
                  "test_lasso_positive_constraint",
                  "test_enet_positive_constraint",
                  "test_enet_cv_positive_constraint",
                  "test_multi_task_lasso_and_enet",
                  "test_lasso_readonly_data",
                  "test_multi_task_lasso_readonly_data",
                  "test_enet_multitarget",
                  "test_multioutput_enetcv_error",
                  "test_warm_start_convergence",
                  "test_warm_start_convergence_with_regularizer_decrement",
                  "test_random_descent",
                  "test_enet_path_positive",
                  "test_sparse_dense_descent_paths",
                  "test_check_input_false",
                  "test_enet_copy_X_False_check_input_False",
                  "test_overrided_gram_matrix",
                  "test_enet_float_precision",
                  "test_enet_l1_ratio",
                  "test_coef_shape_not_zero",
                  "test_warm_start_multitask_lasso",
                  "test_convergence_warnings",
                  "test_sparse_input_convergence_warning"
                ],
                "types": {}
              },
              "test_huber": {
                "functions": [
                  "make_regression_with_outliers",
                  "test_huber_equals_lr_for_high_epsilon",
                  "test_huber_max_iter",
                  "test_huber_gradient",
                  "test_huber_sample_weights",
                  "test_huber_sparse",
                  "test_huber_scaling_invariant",
                  "test_huber_warm_start",
                  "test_huber_better_r2_score",
                  "test_huber_bool"
                ],
                "types": {}
              },
              "test_least_angle": {
                "functions": [
                  "test_simple",
                  "test_simple_precomputed",
                  "test_x_none_gram_none_raises_value_error",
                  "test_all_precomputed",
                  "test_collinearity",
                  "test_no_path",
                  "test_no_path_precomputed",
                  "test_no_path_all_precomputed",
                  "test_singular_matrix",
                  "test_rank_deficient_design",
                  "test_lasso_lars_vs_lasso_cd",
                  "test_lasso_lars_vs_lasso_cd_early_stopping",
                  "test_lasso_lars_path_length",
                  "test_lasso_lars_vs_lasso_cd_ill_conditioned",
                  "test_lasso_lars_vs_lasso_cd_ill_conditioned2",
                  "test_lars_add_features",
                  "test_lars_n_nonzero_coefs",
                  "test_lars_cv_max_iter",
                  "test_lasso_lars_ic",
                  "test_lars_path_readonly_data",
                  "test_lasso_lars_vs_lasso_cd_positive",
                  "test_lasso_lars_vs_R_implementation"
                ],
                "types": {}
              },
              "test_logistic": {
                "functions": [
                  "check_predictions",
                  "test_logistic_cv_score_does_not_warn_by_default",
                  "test_predict_iris",
                  "test_multinomial_binary_probabilities",
                  "test_consistency_path",
                  "test_logistic_regression_path_convergence_fail",
                  "test_liblinear_dual_random_state",
                  "test_logistic_loss_and_grad",
                  "test_logistic_grad_hess",
                  "test_intercept_logistic_helper",
                  "test_ovr_multinomial_iris",
                  "test_logistic_regression_solvers",
                  "test_logistic_regression_solvers_multiclass",
                  "test_logistic_regression_class_weights",
                  "test_multinomial_grad_hess",
                  "test_liblinear_decision_function_zero",
                  "test_logreg_intercept_scaling",
                  "test_logreg_l1",
                  "test_logreg_l1_sparse_data",
                  "test_logreg_predict_proba_multinomial",
                  "test_max_iter",
                  "test_saga_vs_liblinear",
                  "test_warm_start_converge_LR",
                  "test_elastic_net_coeffs",
                  "test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr",
                  "test_logistic_regression_path_coefs_multinomial",
                  "test_logistic_regression_path_deprecation"
                ],
                "types": {
                  "MockScorer": {
                    "methods": []
                  }
                }
              },
              "test_omp": {
                "functions": [
                  "test_correct_shapes",
                  "test_correct_shapes_gram",
                  "test_n_nonzero_coefs",
                  "test_tol",
                  "test_with_without_gram",
                  "test_with_without_gram_tol",
                  "test_unreachable_accuracy",
                  "test_bad_input",
                  "test_perfect_signal_recovery",
                  "test_orthogonal_mp_gram_readonly",
                  "test_estimator",
                  "test_identical_regressors",
                  "test_swapped_regressors",
                  "test_no_atoms",
                  "test_omp_path",
                  "test_omp_return_path_prop_with_gram",
                  "test_omp_cv",
                  "test_omp_reaches_least_squares"
                ],
                "types": {}
              },
              "test_passive_aggressive": {
                "functions": [
                  "test_classifier_undefined_methods",
                  "test_regressor_undefined_methods"
                ],
                "types": {
                  "MyPassiveAggressive": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "project"
                    ]
                  }
                }
              },
              "test_perceptron": {
                "functions": ["test_undefined_methods"],
                "types": {
                  "MyPerceptron": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "project",
                      "predict"
                    ]
                  }
                }
              },
              "test_ransac": {
                "functions": [
                  "test_ransac_inliers_outliers",
                  "test_ransac_is_data_valid",
                  "test_ransac_is_model_valid",
                  "test_ransac_max_trials",
                  "test_ransac_stop_n_inliers",
                  "test_ransac_stop_score",
                  "test_ransac_score",
                  "test_ransac_predict",
                  "test_ransac_resid_thresh_no_inliers",
                  "test_ransac_no_valid_data",
                  "test_ransac_no_valid_model",
                  "test_ransac_exceed_max_skips",
                  "test_ransac_warn_exceed_max_skips",
                  "test_ransac_sparse_coo",
                  "test_ransac_sparse_csr",
                  "test_ransac_sparse_csc",
                  "test_ransac_none_estimator",
                  "test_ransac_min_n_samples",
                  "test_ransac_default_residual_threshold",
                  "test_ransac_dynamic_max_trials",
                  "test_ransac_fit_sample_weight"
                ],
                "types": {}
              },
              "test_ridge": {
                "functions": [
                  "test_primal_dual_relationship",
                  "test_ridge_singular",
                  "test_ridge_regression_sample_weights",
                  "test_ridge_regression_convergence_fail",
                  "test_ridge_sample_weights",
                  "test_ridge_shapes",
                  "test_ridge_intercept",
                  "test_toy_ridge_object",
                  "test_ridge_vs_lstsq",
                  "test_ridge_individual_penalties",
                  "check_dense_sparse",
                  "test_ridge_sparse_svd",
                  "test_class_weights",
                  "test_raises_value_error_if_sample_weights_greater_than_1d",
                  "test_sparse_design_with_sample_weights",
                  "test_raises_value_error_if_solver_not_supported",
                  "test_sparse_cg_max_iter",
                  "test_ridge_fit_intercept_sparse",
                  "test_ridge_classifier_no_support_multilabel",
                  "test_dtype_match_cholesky"
                ],
                "types": {}
              },
              "test_sag": {
                "functions": [
                  "log_dloss",
                  "log_loss",
                  "squared_dloss",
                  "squared_loss",
                  "get_pobj",
                  "sag",
                  "sag_sparse",
                  "get_step_size",
                  "test_classifier_matching",
                  "test_regressor_matching",
                  "test_get_auto_step_size",
                  "test_sag_regressor",
                  "test_multinomial_loss",
                  "test_multinomial_loss_ground_truth"
                ],
                "types": {}
              },
              "test_sgd": {
                "functions": [
                  "SGDClassifier",
                  "SGDRegressor",
                  "SparseSGDClassifier",
                  "SparseSGDRegressor",
                  "asgd",
                  "test_l1_ratio",
                  "test_underflow_or_overlow",
                  "test_numerical_stability_large_gradient",
                  "test_tol_parameter",
                  "test_gradient_hinge",
                  "test_gradient_squared_hinge",
                  "test_gradient_log",
                  "test_gradient_squared_loss",
                  "test_gradient_huber",
                  "test_gradient_modified_huber",
                  "test_gradient_epsilon_insensitive",
                  "test_gradient_squared_epsilon_insensitive",
                  "test_multi_thread_multi_class_and_early_stopping",
                  "test_multi_core_gridsearch_and_early_stopping"
                ],
                "types": {}
              },
              "test_sparse_coordinate_descent": {
                "functions": [
                  "test_sparse_coef",
                  "test_normalize_option",
                  "test_lasso_zero",
                  "test_enet_toy_list_input",
                  "test_enet_toy_explicit_sparse_input",
                  "make_sparse_data",
                  "test_sparse_enet_not_as_toy_dataset",
                  "test_sparse_lasso_not_as_toy_dataset",
                  "test_enet_multitarget",
                  "test_path_parameters",
                  "test_same_output_sparse_dense_lasso_and_enet_cv",
                  "test_same_multiple_output_sparse_dense",
                  "test_sparse_enet_coordinate_descent"
                ],
                "types": {}
              },
              "test_theil_sen": {
                "functions": [
                  "gen_toy_problem_1d",
                  "gen_toy_problem_2d",
                  "gen_toy_problem_4d",
                  "test_modweiszfeld_step_1d",
                  "test_modweiszfeld_step_2d",
                  "test_spatial_median_1d",
                  "test_spatial_median_2d",
                  "test_theil_sen_1d",
                  "test_theil_sen_1d_no_intercept",
                  "test_theil_sen_2d",
                  "test_calc_breakdown_point",
                  "test_checksubparams_negative_subpopulation",
                  "test_checksubparams_too_few_subsamples",
                  "test_checksubparams_too_many_subsamples",
                  "test_checksubparams_n_subsamples_if_less_samples_than_features",
                  "test_subpopulation",
                  "test_subsamples",
                  "test_verbosity",
                  "test_theil_sen_parallel",
                  "test_less_samples_than_features"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": ["make_dataset"],
            "types": {
              "LinearModel": {
                "methods": ["predict"]
              },
              "LinearClassifierMixin": {
                "methods": ["decision_function", "predict"]
              },
              "SparseCoefMixin": {
                "methods": [
                  {
                    "name": "densify",
                    "updates": [0]
                  },
                  {
                    "name": "sparsify",
                    "updates": [0]
                  }
                ]
              },
              "LinearRegression": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "bayes": {
            "functions": [],
            "types": {
              "BayesianRidge": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              },
              "ARDRegression": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              }
            }
          },
          "coordinate_descent": {
            "functions": ["lasso_path", "enet_path"],
            "types": {
              "ElasticNet": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "Lasso": {
                "methods": []
              },
              "LinearModelCV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "LassoCV": {
                "methods": []
              },
              "ElasticNetCV": {
                "methods": []
              },
              "MultiTaskElasticNet": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "MultiTaskLasso": {
                "methods": []
              },
              "MultiTaskElasticNetCV": {
                "methods": []
              },
              "MultiTaskLassoCV": {
                "methods": []
              }
            }
          },
          "huber": {
            "functions": [],
            "types": {
              "HuberRegressor": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "least_angle": {
            "functions": ["lars_path", "lars_path_gram"],
            "types": {
              "Lars": {
                "methods": ["fit"]
              },
              "LassoLars": {
                "methods": []
              },
              "LarsCV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "LassoLarsCV": {
                "methods": []
              },
              "LassoLarsIC": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "logistic": {},
          "omp": {
            "functions": ["orthogonal_mp", "orthogonal_mp_gram"],
            "types": {
              "OrthogonalMatchingPursuit": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "OrthogonalMatchingPursuitCV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "passive_aggressive": {
            "functions": [],
            "types": {
              "PassiveAggressiveClassifier": {
                "methods": ["partial_fit", "fit"]
              },
              "PassiveAggressiveRegressor": {
                "methods": ["partial_fit", "fit"]
              }
            }
          },
          "perceptron": {
            "functions": [],
            "types": {
              "Perceptron": {
                "methods": []
              }
            }
          },
          "ransac": {
            "functions": [],
            "types": {
              "RANSACRegressor": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "score"
                ]
              }
            }
          },
          "ridge": {
            "functions": ["ridge_regression"],
            "types": {
              "Ridge": {
                "methods": ["fit"]
              },
              "RidgeClassifier": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "RidgeCV": {
                "methods": []
              },
              "RidgeClassifierCV": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "sag": {
            "functions": ["get_auto_step_size", "sag_solver"],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "stochastic_gradient": {
            "functions": ["fit_binary"],
            "types": {
              "BaseSGD": {
                "methods": ["set_params"]
              },
              "BaseSGDClassifier": {
                "methods": ["partial_fit", "fit"]
              },
              "SGDClassifier": {
                "methods": []
              },
              "BaseSGDRegressor": {
                "methods": ["partial_fit", "fit", "predict"]
              },
              "SGDRegressor": {
                "methods": []
              }
            }
          },
          "theil_sen": {
            "functions": [],
            "types": {
              "TheilSenRegressor": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "LinearRegression": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "BayesianRidge": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "ARDRegression": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "Lars": {
            "methods": ["fit"]
          },
          "LassoLars": {
            "methods": []
          },
          "LarsCV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "LassoLarsCV": {
            "methods": []
          },
          "LassoLarsIC": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "Lasso": {
            "methods": []
          },
          "ElasticNet": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "LassoCV": {
            "methods": []
          },
          "ElasticNetCV": {
            "methods": []
          },
          "MultiTaskLasso": {
            "methods": []
          },
          "MultiTaskElasticNet": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MultiTaskElasticNetCV": {
            "methods": []
          },
          "MultiTaskLassoCV": {
            "methods": []
          },
          "HuberRegressor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "SGDClassifier": {
            "methods": []
          },
          "SGDRegressor": {
            "methods": []
          },
          "Ridge": {
            "methods": ["fit"]
          },
          "RidgeCV": {
            "methods": []
          },
          "RidgeClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "RidgeClassifierCV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "OrthogonalMatchingPursuit": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "OrthogonalMatchingPursuitCV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "PassiveAggressiveClassifier": {
            "methods": ["partial_fit", "fit"]
          },
          "PassiveAggressiveRegressor": {
            "methods": ["partial_fit", "fit"]
          },
          "Perceptron": {
            "methods": []
          },
          "RANSACRegressor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "score"
            ]
          },
          "TheilSenRegressor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          }
        },
        "functions": [
          "lars_path",
          "lars_path_gram",
          "lasso_path",
          "enet_path",
          "ridge_regression",
          "orthogonal_mp",
          "orthogonal_mp_gram"
        ]
      },
      "manifold": {
        "modules": {
          "tests": {
            "modules": {
              "test_isomap": {
                "functions": [
                  "test_isomap_simple_grid",
                  "test_isomap_reconstruction_error",
                  "test_transform",
                  "test_pipeline",
                  "test_isomap_clone_bug",
                  "test_sparse_input"
                ],
                "types": {}
              },
              "test_locally_linear": {
                "functions": [
                  "test_barycenter_kneighbors_graph",
                  "test_lle_simple_grid",
                  "test_lle_manifold",
                  "test_lle_init_parameters",
                  "test_pipeline",
                  "test_singular_matrix",
                  "test_integer_input"
                ],
                "types": {}
              },
              "test_mds": {
                "functions": ["test_smacof", "test_smacof_error", "test_MDS"],
                "types": {}
              },
              "test_spectral_embedding": {
                "functions": [
                  "test_sparse_graph_connected_component",
                  "test_spectral_embedding_precomputed_affinity",
                  "test_spectral_embedding_callable_affinity",
                  "test_spectral_embedding_amg_solver",
                  "test_spectral_embedding_unknown_eigensolver",
                  "test_spectral_embedding_unknown_affinity",
                  "test_connectivity",
                  "test_spectral_embedding_deterministic",
                  "test_spectral_embedding_unnormalized",
                  "test_spectral_embedding_first_eigen_vector"
                ],
                "types": {}
              },
              "test_t_sne": {
                "functions": [
                  "test_gradient_descent_stops",
                  "test_binary_search",
                  "test_binary_search_neighbors",
                  "test_binary_perplexity_stability",
                  "test_gradient",
                  "test_trustworthiness",
                  "test_preserve_trustworthiness_approximately",
                  "test_optimization_minimizes_kl_divergence",
                  "test_fit_csr_matrix",
                  "test_preserve_trustworthiness_approximately_with_precomputed_distances",
                  "test_trustworthiness_precomputed_deprecation",
                  "test_trustworthiness_not_euclidean_metric",
                  "test_early_exaggeration_too_small",
                  "test_too_few_iterations",
                  "test_non_square_precomputed_distances",
                  "test_non_positive_precomputed_distances",
                  "test_non_positive_computed_distances",
                  "test_init_not_available",
                  "test_init_ndarray",
                  "test_init_ndarray_precomputed",
                  "test_distance_not_available",
                  "test_method_not_available",
                  "test_angle_out_of_range_checks",
                  "test_pca_initialization_not_compatible_with_precomputed_kernel",
                  "test_n_components_range",
                  "test_early_exaggeration_used",
                  "test_n_iter_used",
                  "test_answer_gradient_two_points",
                  "test_answer_gradient_four_points",
                  "test_skip_num_points_gradient",
                  "test_verbose",
                  "test_chebyshev_metric",
                  "test_reduction_to_one_component",
                  "test_no_sparse_on_barnes_hut",
                  "test_barnes_hut_angle",
                  "test_min_grad_norm",
                  "test_accessible_kl_divergence",
                  "check_uniform_grid",
                  "assert_uniform_grid",
                  "test_bh_match_exact",
                  "test_tsne_with_different_distance_metrics"
                ],
                "types": {
                  "ObjectiveSmallGradient": {
                    "methods": []
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "isomap": {
            "functions": [],
            "types": {
              "Isomap": {
                "methods": [
                  "reconstruction_error",
                  "fit",
                  "fit_transform",
                  "transform"
                ]
              }
            }
          },
          "locally_linear": {
            "functions": [
              "barycenter_weights",
              "barycenter_kneighbors_graph",
              "null_space",
              "locally_linear_embedding"
            ],
            "types": {
              "LocallyLinearEmbedding": {
                "methods": ["fit", "fit_transform", "transform"]
              }
            }
          },
          "mds": {
            "functions": ["smacof"],
            "types": {
              "MDS": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "spectral_embedding_": {
            "functions": ["spectral_embedding"],
            "types": {
              "SpectralEmbedding": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "t_sne": {
            "functions": ["trustworthiness"],
            "types": {
              "TSNE": {
                "methods": [
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "LocallyLinearEmbedding": {
            "methods": ["fit", "fit_transform", "transform"]
          },
          "Isomap": {
            "methods": [
              "reconstruction_error",
              "fit",
              "fit_transform",
              "transform"
            ]
          },
          "MDS": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              }
            ]
          },
          "SpectralEmbedding": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              }
            ]
          },
          "TSNE": {
            "methods": [
              {
                "name": "fit_transform",
                "updates": [0]
              },
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          }
        },
        "functions": [
          "locally_linear_embedding",
          "smacof",
          "spectral_embedding"
        ]
      },
      "metrics": {
        "modules": {
          "cluster": {
            "modules": {
              "tests": {
                "modules": {
                  "test_bicluster": {
                    "functions": [
                      "test_jaccard",
                      "test_consensus_score",
                      "test_consensus_score_issue2445"
                    ],
                    "types": {}
                  },
                  "test_common": {
                    "functions": ["test_symmetric_non_symmetric_union"],
                    "types": {}
                  },
                  "test_supervised": {
                    "functions": [
                      "test_future_warning",
                      "test_generalized_average",
                      "test_homogeneous_but_not_complete_labeling",
                      "test_complete_but_not_homogeneous_labeling",
                      "test_not_complete_and_not_homogeneous_labeling",
                      "test_beta_parameter",
                      "test_non_consecutive_labels",
                      "test_expected_mutual_info_overflow",
                      "test_int_overflow_mutual_info_fowlkes_mallows_score",
                      "test_entropy",
                      "test_contingency_matrix",
                      "test_contingency_matrix_sparse",
                      "test_v_measure_and_mutual_information",
                      "test_fowlkes_mallows_score",
                      "test_fowlkes_mallows_score_properties"
                    ],
                    "types": {}
                  },
                  "test_unsupervised": {
                    "functions": [
                      "test_silhouette",
                      "test_cluster_size_1",
                      "test_silhouette_paper_example",
                      "test_correct_labelsize",
                      "test_non_encoded_labels",
                      "test_non_numpy_labels",
                      "assert_raises_on_only_one_label",
                      "assert_raises_on_all_points_same_cluster",
                      "test_calinski_harabasz_score",
                      "test_deprecated_calinski_harabaz_score",
                      "test_davies_bouldin_score"
                    ],
                    "types": {}
                  }
                },
                "types": {},
                "functions": []
              },
              "bicluster": {
                "functions": ["consensus_score"],
                "types": {}
              },
              "setup": {
                "functions": ["configuration"],
                "types": {}
              },
              "supervised": {
                "functions": [
                  "check_clusterings",
                  "contingency_matrix",
                  "adjusted_rand_score",
                  "homogeneity_completeness_v_measure",
                  "homogeneity_score",
                  "completeness_score",
                  "v_measure_score",
                  "mutual_info_score",
                  "adjusted_mutual_info_score",
                  "normalized_mutual_info_score",
                  "fowlkes_mallows_score",
                  "entropy"
                ],
                "types": {}
              },
              "unsupervised": {
                "functions": [
                  "check_number_of_labels",
                  "silhouette_score",
                  "silhouette_samples",
                  "calinski_harabasz_score",
                  "davies_bouldin_score"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": [
              "adjusted_mutual_info_score",
              "normalized_mutual_info_score",
              "adjusted_rand_score",
              "completeness_score",
              "contingency_matrix",
              "homogeneity_completeness_v_measure",
              "homogeneity_score",
              "mutual_info_score",
              "v_measure_score",
              "fowlkes_mallows_score",
              "entropy",
              "silhouette_samples",
              "silhouette_score",
              "calinski_harabasz_score",
              "davies_bouldin_score",
              "consensus_score"
            ]
          },
          "tests": {
            "modules": {
              "test_classification": {
                "functions": [
                  "make_prediction",
                  "test_classification_report_dictionary_output",
                  "test_multilabel_accuracy_score_subset_accuracy",
                  "test_precision_recall_f1_score_binary",
                  "test_average_precision_score_score_non_binary_class",
                  "test_average_precision_score_duplicate_values",
                  "test_average_precision_score_tied_values",
                  "test_precision_recall_f_unused_pos_label",
                  "test_confusion_matrix_binary",
                  "test_multilabel_confusion_matrix_binary",
                  "test_multilabel_confusion_matrix_multiclass",
                  "test_multilabel_confusion_matrix_multilabel",
                  "test_multilabel_confusion_matrix_errors",
                  "test_cohen_kappa",
                  "test_matthews_corrcoef_against_numpy_corrcoef",
                  "test_matthews_corrcoef_against_jurman",
                  "test_matthews_corrcoef",
                  "test_matthews_corrcoef_multiclass",
                  "test_precision_recall_f1_score_multiclass",
                  "test_precision_recall_f1_score_binary_averaged",
                  "test_zero_precision_recall",
                  "test_confusion_matrix_multiclass_subset_labels",
                  "test_confusion_matrix_dtype",
                  "test_classification_report_multiclass",
                  "test_classification_report_multiclass_balanced",
                  "test_classification_report_multiclass_with_label_detection",
                  "test_classification_report_multiclass_with_digits",
                  "test_classification_report_multiclass_with_string_label",
                  "test_classification_report_multiclass_with_unicode_label",
                  "test_classification_report_multiclass_with_long_string_label",
                  "test_classification_report_labels_target_names_unequal_length",
                  "test_classification_report_no_labels_target_names_unequal_length",
                  "test_multilabel_zero_one_loss_subset",
                  "test_multilabel_hamming_loss",
                  "test_jaccard_score_validation",
                  "test_multilabel_jaccard_score",
                  "test_multiclass_jaccard_score",
                  "test_average_binary_jaccard_score",
                  "test_precision_recall_f1_no_labels_average_none",
                  "test_prf_warnings",
                  "test_recall_warnings",
                  "test_precision_warnings",
                  "test_fscore_warnings",
                  "test_prf_average_binary_data_non_binary",
                  "test__check_targets",
                  "test__check_targets_multiclass_with_both_y_true_and_y_pred_binary",
                  "test_hinge_loss_binary",
                  "test_hinge_loss_multiclass",
                  "test_hinge_loss_multiclass_missing_labels_with_labels_none",
                  "test_hinge_loss_multiclass_with_missing_labels",
                  "test_hinge_loss_multiclass_invariance_lists",
                  "test_log_loss",
                  "test_log_loss_pandas_input",
                  "test_brier_score_loss",
                  "test_balanced_accuracy_score_unseen",
                  "test_multilabel_jaccard_similarity_score_deprecation"
                ],
                "types": {}
              },
              "test_common": {
                "functions": [
                  "precision_recall_curve_padded_thresholds",
                  "test_normalize_option_multilabel_classification",
                  "check_averaging",
                  "test_averaging_binary_multilabel_all_zeroes"
                ],
                "types": {}
              },
              "test_pairwise": {
                "functions": [
                  "test_pairwise_distances",
                  "test_no_data_conversion_warning",
                  "test_pairwise_precomputed_non_negative",
                  "callable_rbf_kernel",
                  "test_pairwise_callable_nonstrict_metric",
                  "test_pairwise_kernels_callable",
                  "test_pairwise_kernels_filter_param",
                  "test_paired_distances_callable",
                  "test_pairwise_distances_argmin_min",
                  "test_pairwise_distances_chunked_reduce",
                  "check_pairwise_distances_chunked",
                  "test_cosine_distances",
                  "test_haversine_distances",
                  "test_paired_euclidean_distances",
                  "test_paired_manhattan_distances",
                  "test_chi_square_kernel",
                  "test_linear_kernel",
                  "test_rbf_kernel",
                  "test_laplacian_kernel",
                  "test_cosine_similarity",
                  "test_check_dense_matrices",
                  "test_check_XB_returned",
                  "test_check_different_dimensions",
                  "test_check_invalid_dimensions",
                  "test_check_sparse_arrays",
                  "tuplify",
                  "test_check_tuple_input",
                  "test_check_preserve_type"
                ],
                "types": {}
              },
              "test_ranking": {
                "functions": [
                  "make_prediction",
                  "test_roc_curve_end_points",
                  "test_roc_returns_consistency",
                  "test_roc_curve_multi",
                  "test_roc_curve_confidence",
                  "test_roc_curve_hard",
                  "test_roc_curve_one_label",
                  "test_roc_curve_toydata",
                  "test_roc_curve_drop_intermediate",
                  "test_roc_curve_fpr_tpr_increasing",
                  "test_auc",
                  "test_auc_errors",
                  "test_deprecated_auc_reorder",
                  "test_auc_score_non_binary_class",
                  "test_binary_clf_curve",
                  "test_precision_recall_curve",
                  "test_precision_recall_curve_errors",
                  "test_precision_recall_curve_toydata",
                  "test_average_precision_constant_values",
                  "test_average_precision_score_pos_label_errors",
                  "test_score_scale_invariance",
                  "check_lrap_toy",
                  "check_zero_or_all_relevant_labels",
                  "check_lrap_error_raised",
                  "check_lrap_only_ties",
                  "check_lrap_without_tie_and_increasing_score",
                  "check_alternative_lrap_implementation",
                  "test_lrap_error_raised",
                  "test_lrap_sample_weighting_zero_labels",
                  "test_coverage_error",
                  "test_coverage_tie_handling",
                  "test_label_ranking_loss",
                  "test_ranking_appropriate_input_shape",
                  "test_ranking_loss_ties_handling",
                  "test_partial_roc_auc_score"
                ],
                "types": {}
              },
              "test_regression": {
                "functions": [
                  "test_regression_metrics",
                  "test_multioutput_regression",
                  "test_regression_metrics_at_limits",
                  "test__check_reg_targets",
                  "test__check_reg_targets_exception",
                  "test_regression_multioutput_array",
                  "test_regression_custom_weights"
                ],
                "types": {}
              },
              "test_score_objects": {
                "functions": [
                  "setup_module",
                  "teardown_module",
                  "test_all_scorers_repr",
                  "check_scoring_validator_for_single_metric_usecases",
                  "check_multimetric_scoring_single_metric_wrapper",
                  "test_check_scoring_and_check_multimetric_scoring",
                  "test_make_scorer",
                  "test_classification_scores",
                  "test_regression_scorers",
                  "test_thresholded_scorers_multilabel_indicator_data"
                ],
                "types": {
                  "EstimatorWithoutFit": {
                    "methods": []
                  },
                  "EstimatorWithFit": {
                    "methods": ["fit"]
                  },
                  "EstimatorWithFitAndScore": {
                    "methods": ["fit", "score"]
                  },
                  "EstimatorWithFitAndPredict": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict"
                    ]
                  },
                  "DummyScorer": {
                    "methods": []
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {}
          },
          "classification": {
            "functions": [
              "accuracy_score",
              "confusion_matrix",
              "multilabel_confusion_matrix",
              "cohen_kappa_score",
              "jaccard_similarity_score",
              "jaccard_score",
              "matthews_corrcoef",
              "zero_one_loss",
              "f1_score",
              "fbeta_score",
              "precision_recall_fscore_support",
              "precision_score",
              "recall_score",
              "balanced_accuracy_score",
              "classification_report",
              "hamming_loss",
              "log_loss",
              "hinge_loss",
              "brier_score_loss"
            ],
            "types": {}
          },
          "pairwise": {
            "functions": [
              "check_pairwise_arrays",
              "check_paired_arrays",
              "euclidean_distances",
              "pairwise_distances_argmin_min",
              "pairwise_distances_argmin",
              "haversine_distances",
              "manhattan_distances",
              "cosine_distances",
              "paired_euclidean_distances",
              "paired_manhattan_distances",
              "paired_cosine_distances",
              "paired_distances",
              "linear_kernel",
              "polynomial_kernel",
              "sigmoid_kernel",
              "rbf_kernel",
              "laplacian_kernel",
              "cosine_similarity",
              "additive_chi2_kernel",
              "chi2_kernel",
              "distance_metrics",
              "pairwise_distances_chunked",
              "pairwise_distances",
              "kernel_metrics",
              "pairwise_kernels"
            ],
            "types": {}
          },
          "ranking": {
            "functions": [
              "auc",
              "average_precision_score",
              "roc_auc_score",
              "precision_recall_curve",
              "roc_curve",
              "label_ranking_average_precision_score",
              "coverage_error",
              "label_ranking_loss"
            ],
            "types": {}
          },
          "regression": {
            "functions": [
              "mean_absolute_error",
              "mean_squared_error",
              "mean_squared_log_error",
              "median_absolute_error",
              "explained_variance_score",
              "r2_score",
              "max_error"
            ],
            "types": {}
          },
          "scorer": {
            "functions": ["get_scorer", "check_scoring", "make_scorer"],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          }
        },
        "types": {},
        "functions": [
          "auc",
          "average_precision_score",
          "coverage_error",
          "label_ranking_average_precision_score",
          "label_ranking_loss",
          "precision_recall_curve",
          "roc_auc_score",
          "roc_curve",
          "accuracy_score",
          "balanced_accuracy_score",
          "classification_report",
          "cohen_kappa_score",
          "confusion_matrix",
          "f1_score",
          "fbeta_score",
          "hamming_loss",
          "hinge_loss",
          "jaccard_similarity_score",
          "jaccard_score",
          "log_loss",
          "matthews_corrcoef",
          "precision_recall_fscore_support",
          "precision_score",
          "recall_score",
          "zero_one_loss",
          "brier_score_loss",
          "multilabel_confusion_matrix",
          "adjusted_mutual_info_score",
          "adjusted_rand_score",
          "completeness_score",
          "consensus_score",
          "homogeneity_completeness_v_measure",
          "homogeneity_score",
          "mutual_info_score",
          "normalized_mutual_info_score",
          "fowlkes_mallows_score",
          "silhouette_samples",
          "silhouette_score",
          "calinski_harabasz_score",
          "v_measure_score",
          "davies_bouldin_score",
          "euclidean_distances",
          "pairwise_distances",
          "pairwise_distances_argmin",
          "pairwise_distances_argmin_min",
          "pairwise_kernels",
          "pairwise_distances_chunked",
          "explained_variance_score",
          "max_error",
          "mean_absolute_error",
          "mean_squared_error",
          "mean_squared_log_error",
          "median_absolute_error",
          "r2_score",
          "check_scoring",
          "make_scorer",
          "get_scorer"
        ]
      },
      "mixture": {
        "modules": {
          "tests": {
            "modules": {
              "test_bayesian_mixture": {
                "functions": [
                  "test_log_dirichlet_norm",
                  "test_log_wishart_norm",
                  "test_bayesian_mixture_covariance_type",
                  "test_bayesian_mixture_weight_concentration_prior_type",
                  "test_bayesian_mixture_weights_prior_initialisation",
                  "test_bayesian_mixture_mean_prior_initialisation",
                  "test_bayesian_mixture_precisions_prior_initialisation",
                  "test_bayesian_mixture_check_is_fitted",
                  "test_bayesian_mixture_weights",
                  "test_compare_covar_type",
                  "test_bayesian_mixture_fit_predict_n_init",
                  "test_bayesian_mixture_predict_predict_proba"
                ],
                "types": {}
              },
              "test_gaussian_mixture": {
                "functions": [
                  "generate_data",
                  "test_gaussian_mixture_attributes",
                  "test_check_X",
                  "test_check_weights",
                  "test_check_means",
                  "test_check_precisions",
                  "test_suffstat_sk_full",
                  "test_suffstat_sk_tied",
                  "test_suffstat_sk_diag",
                  "test_gaussian_suffstat_sk_spherical",
                  "test_compute_log_det_cholesky",
                  "test_gaussian_mixture_log_probabilities",
                  "test_gaussian_mixture_estimate_log_prob_resp",
                  "test_gaussian_mixture_predict_predict_proba",
                  "test_gaussian_mixture_fit_predict_n_init",
                  "test_gaussian_mixture_fit",
                  "test_gaussian_mixture_fit_best_params",
                  "test_gaussian_mixture_fit_convergence_warning",
                  "test_multiple_init",
                  "test_gaussian_mixture_n_parameters",
                  "test_bic_1d_1component",
                  "test_gaussian_mixture_aic_bic",
                  "test_gaussian_mixture_verbose",
                  "test_score",
                  "test_score_samples",
                  "test_monotonic_likelihood",
                  "test_regularisation",
                  "test_property",
                  "test_sample"
                ],
                "types": {
                  "RandomData": {
                    "methods": []
                  }
                }
              },
              "test_mixture": {
                "functions": [],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {
              "BaseMixture": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_predict",
                    "updates": [0]
                  },
                  "score_samples",
                  "score",
                  "predict",
                  "predict_proba",
                  "sample"
                ]
              }
            }
          },
          "bayesian_mixture": {},
          "gaussian_mixture": {
            "functions": [],
            "types": {
              "GaussianMixture": {
                "methods": ["bic", "aic"]
              }
            }
          }
        },
        "types": {
          "GaussianMixture": {
            "methods": ["bic", "aic"]
          }
        },
        "functions": []
      },
      "model_selection": {
        "modules": {
          "tests": {
            "modules": {
              "common": {
                "functions": [],
                "types": {
                  "OneTimeSplitter": {
                    "methods": ["split", "get_n_splits"]
                  }
                }
              },
              "test_search": {
                "functions": [
                  "assert_grid_iter_equals_getitem",
                  "test_parameter_grid",
                  "check_hyperparameter_searcher_with_fit_params",
                  "test_refit_callable",
                  "test_refit_callable_invalid_type",
                  "test_refit_callable_multi_metric",
                  "test_param_sampler",
                  "check_cv_results_array_types",
                  "check_cv_results_keys",
                  "test_grid_search_cv_results",
                  "test_random_search_cv_results",
                  "test_grid_search_cv_results_multimetric",
                  "test_random_search_cv_results_multimetric",
                  "compare_cv_results_multimetric_with_single",
                  "compare_refit_methods_when_refit_with_acc",
                  "test_parameters_sampler_replacement",
                  "test_custom_run_search",
                  "test__custom_fit_no_run_search",
                  "test_deprecated_grid_search_iid",
                  "test_empty_cv_iterator_error",
                  "test_random_search_bad_cv"
                ],
                "types": {
                  "MockClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "transform",
                      "inverse_transform",
                      "score",
                      "get_params",
                      {
                        "name": "set_params",
                        "updates": [0]
                      }
                    ]
                  },
                  "LinearSVCNoScore": {
                    "methods": []
                  },
                  "BrokenClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict"
                    ]
                  },
                  "FailingClassifier": {
                    "methods": ["fit", "predict", "score"]
                  },
                  "CustomSearchCV": {
                    "methods": []
                  },
                  "NoRunSearchSearchCV": {
                    "methods": ["fit"]
                  },
                  "BadSearchCV": {
                    "methods": []
                  },
                  "BrokenKFold": {
                    "methods": ["get_n_splits"]
                  }
                }
              },
              "test_split": {
                "functions": [
                  "check_valid_split",
                  "check_cv_coverage",
                  "test_kfold_valueerrors",
                  "test_kfold_indices",
                  "test_kfold_no_shuffle",
                  "test_stratified_kfold_no_shuffle",
                  "test_stratified_kfold_ratios",
                  "test_kfold_balance",
                  "test_stratifiedkfold_balance",
                  "test_shuffle_kfold",
                  "test_shuffle_kfold_stratifiedkfold_reproducibility",
                  "test_shuffle_stratifiedkfold",
                  "test_kfold_can_detect_dependent_samples_on_digits",
                  "test_shuffle_split",
                  "test_stratified_shuffle_split_respects_test_size",
                  "test_stratified_shuffle_split_iter",
                  "test_stratified_shuffle_split_even",
                  "test_stratified_shuffle_split_overlap_train_test_bug",
                  "test_stratified_shuffle_split_multilabel",
                  "test_stratified_shuffle_split_multilabel_many_labels",
                  "test_predefinedsplit_with_kfold_split",
                  "test_group_shuffle_split",
                  "test_leave_one_p_group_out",
                  "test_leave_group_out_changing_groups",
                  "test_leave_one_p_group_out_error_on_fewer_number_of_groups",
                  "test_repeated_kfold_determinstic_split",
                  "test_get_n_splits_for_repeated_kfold",
                  "test_get_n_splits_for_repeated_stratified_kfold",
                  "test_repeated_stratified_kfold_determinstic_split",
                  "test_train_test_split_errors",
                  "test_train_test_split",
                  "test_train_test_split_sparse",
                  "test_train_test_split_mock_pandas",
                  "test_train_test_split_list_input",
                  "test_shufflesplit_reproducible",
                  "test_stratifiedshufflesplit_list_input",
                  "test_train_test_split_allow_nans",
                  "test_check_cv",
                  "test_cv_iterable_wrapper",
                  "test_group_kfold",
                  "test_time_series_cv",
                  "test_time_series_max_train_size",
                  "test_nsplit_default_warn",
                  "test_check_cv_default_warn",
                  "test_build_repr",
                  "test_train_test_split_empty_trainset",
                  "test_leave_one_out_empty_trainset",
                  "test_leave_p_out_empty_trainset"
                ],
                "types": {
                  "MockClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "score",
                      "get_params"
                    ]
                  },
                  "MockSplitter": {
                    "methods": []
                  }
                }
              },
              "test_validation": {
                "functions": [
                  "test_cross_validate",
                  "check_cross_validate_single_metric",
                  "check_cross_validate_multi_metric",
                  "test_cross_val_score_mask",
                  "test_cross_val_score_score_func",
                  "test_cross_val_score_errors",
                  "test_cross_val_score_with_score_func_classification",
                  "test_cross_val_score_with_score_func_regression",
                  "test_permutation_score",
                  "test_permutation_test_score_allow_nans",
                  "test_cross_val_score_allow_nans",
                  "test_cross_val_score_multilabel",
                  "test_learning_curve",
                  "test_learning_curve_unsupervised",
                  "test_learning_curve_verbose",
                  "test_learning_curve_incremental_learning_not_possible",
                  "test_learning_curve_incremental_learning",
                  "test_learning_curve_incremental_learning_unsupervised",
                  "test_learning_curve_n_sample_range_out_of_bounds",
                  "test_learning_curve_remove_duplicate_sample_sizes",
                  "test_learning_curve_with_boolean_indices",
                  "test_validation_curve",
                  "test_validation_curve_clone_estimator",
                  "test_validation_curve_cv_splits_consistency",
                  "test_check_is_permutation",
                  "test_cross_val_predict_sparse_prediction",
                  "check_cross_val_predict_binary",
                  "check_cross_val_predict_multiclass",
                  "check_cross_val_predict_multilabel",
                  "check_cross_val_predict_with_method_binary",
                  "check_cross_val_predict_with_method_multiclass",
                  "test_cross_val_predict_with_method_multilabel_ovr",
                  "test_cross_val_predict_with_method_multilabel_rf",
                  "test_cross_val_predict_with_method_rare_class",
                  "test_cross_val_predict_with_method_multilabel_rf_rare_class",
                  "get_expected_predictions",
                  "test_fit_and_score_failing",
                  "test_fit_and_score_working",
                  "three_params_scorer",
                  "test_score"
                ],
                "types": {
                  "MockImprovingEstimator": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "score"
                    ]
                  },
                  "MockIncrementalImprovingEstimator": {
                    "methods": [
                      {
                        "name": "partial_fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "MockEstimatorWithParameter": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "score"
                    ]
                  },
                  "MockEstimatorWithSingleFitCallAllowed": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict"
                    ]
                  },
                  "MockClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict",
                      "score",
                      "get_params"
                    ]
                  },
                  "BrokenEstimator": {
                    "methods": []
                  },
                  "BadCV": {
                    "methods": ["split"]
                  },
                  "RFWithDecisionFunction": {
                    "methods": ["decision_function"]
                  }
                }
              }
            },
            "types": {},
            "functions": []
          }
        },
        "types": {},
        "functions": []
      },
      "neighbors": {
        "modules": {
          "tests": {
            "modules": {
              "test_ball_tree": {
                "functions": [
                  "dist_func",
                  "brute_force_neighbors",
                  "test_ball_tree_query_radius",
                  "test_ball_tree_query_radius_distance",
                  "compute_kernel_slow",
                  "test_gaussian_kde",
                  "test_ball_tree_two_point",
                  "test_ball_tree_pickle",
                  "test_neighbors_heap",
                  "test_node_heap",
                  "test_simultaneous_sort",
                  "test_query_haversine"
                ],
                "types": {}
              },
              "test_dist_metrics": {
                "functions": [
                  "dist_func",
                  "check_cdist",
                  "check_cdist_bool",
                  "check_pdist",
                  {
                    "name": "check_pdist_bool",
                    "updates": [1]
                  },
                  "check_pickle",
                  "test_haversine_metric",
                  "test_pyfunc_metric",
                  "test_bad_pyfunc_metric",
                  "test_input_data_size"
                ],
                "types": {}
              },
              "test_kde": {
                "functions": [
                  "compute_kernel_slow",
                  "check_results",
                  "test_kernel_density_sampling",
                  "test_kde_score",
                  "test_kde_badargs",
                  "test_kde_pipeline_gridsearch",
                  "test_kde_sample_weights"
                ],
                "types": {}
              },
              "test_kd_tree": {
                "functions": [
                  "brute_force_neighbors",
                  "check_neighbors",
                  "test_kd_tree_query_radius",
                  "test_kd_tree_query_radius_distance",
                  "compute_kernel_slow",
                  "check_results",
                  "test_gaussian_kde",
                  "test_neighbors_heap",
                  "test_node_heap",
                  "test_simultaneous_sort"
                ],
                "types": {}
              },
              "test_lof": {
                "functions": [
                  "test_contamination",
                  "test_contamination_future_warning",
                  "test_predicted_outlier_number"
                ],
                "types": {}
              },
              "test_nca": {
                "functions": [
                  "test_simple_example",
                  "test_toy_example_collapse_points",
                  "test_finite_differences",
                  "test_params_validation",
                  "test_transformation_dimensions",
                  "test_n_components",
                  "test_init_transformation",
                  "test_warm_start_validation",
                  "test_warm_start_effectiveness",
                  "test_no_verbose",
                  "test_singleton_class",
                  "test_one_class",
                  "test_callback",
                  "test_expected_transformation_shape",
                  "test_convergence_warning"
                ],
                "types": {
                  "LossStorer": {
                    "methods": [
                      {
                        "name": "callback",
                        "updates": [0]
                      }
                    ]
                  },
                  "TransformationStorer": {
                    "methods": [
                      {
                        "name": "callback",
                        "updates": [0]
                      }
                    ]
                  }
                }
              },
              "test_nearest_centroid": {
                "functions": [
                  "test_classification_toy",
                  "test_precomputed",
                  "test_iris",
                  "test_iris_shrinkage",
                  "test_pickle",
                  "test_shrinkage_correct",
                  "test_shrinkage_threshold_decoded_y",
                  "test_predict_translated_data",
                  "test_manhattan_metric"
                ],
                "types": {}
              },
              "test_neighbors": {
                "functions": [
                  "test_unsupervised_kneighbors",
                  "test_unsupervised_inputs",
                  "test_n_neighbors_datatype",
                  "test_not_fitted_error_gets_raised",
                  "test_precomputed",
                  "test_unsupervised_radius_neighbors",
                  "test_kneighbors_classifier",
                  "test_kneighbors_classifier_float_labels",
                  "test_kneighbors_classifier_predict_proba",
                  "test_radius_neighbors_classifier",
                  "test_radius_neighbors_classifier_when_no_neighbors",
                  "test_radius_neighbors_classifier_outlier_labeling",
                  "test_radius_neighbors_classifier_zero_distance",
                  "test_neighbors_regressors_zero_distance",
                  "test_radius_neighbors_boundary_handling",
                  "test_RadiusNeighborsClassifier_multioutput",
                  "test_kneighbors_classifier_sparse",
                  "test_KNeighborsClassifier_multioutput",
                  "test_kneighbors_regressor",
                  "test_KNeighborsRegressor_multioutput_uniform_weight",
                  "test_kneighbors_regressor_multioutput",
                  "test_radius_neighbors_regressor",
                  "test_RadiusNeighborsRegressor_multioutput_with_uniform_weight",
                  "test_RadiusNeighborsRegressor_multioutput",
                  "test_kneighbors_regressor_sparse",
                  "test_neighbors_iris",
                  "test_neighbors_digits",
                  "test_kneighbors_graph",
                  "test_kneighbors_graph_sparse",
                  "test_radius_neighbors_graph",
                  "test_radius_neighbors_graph_sparse",
                  "test_neighbors_badargs",
                  "test_neighbors_metrics",
                  "test_callable_metric",
                  "test_valid_brute_metric_for_auto_algorithm",
                  "test_metric_params_interface",
                  "test_predict_sparse_ball_kd_tree",
                  "test_non_euclidean_kneighbors",
                  "check_object_arrays",
                  "test_k_and_radius_neighbors_train_is_not_query",
                  "test_k_and_radius_neighbors_X_None",
                  "test_k_and_radius_neighbors_duplicates",
                  "test_include_self_neighbors_graph",
                  "test_dtype_convert",
                  "test_sparse_metric_callable"
                ],
                "types": {}
              },
              "test_quad_tree": {
                "functions": [
                  "test_quadtree_boundary_computation",
                  "test_quadtree_similar_point",
                  "test_summarize"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {
              "NeighborsBase": {
                "methods": []
              },
              "KNeighborsMixin": {
                "methods": ["kneighbors", "kneighbors_graph"]
              },
              "RadiusNeighborsMixin": {
                "methods": ["radius_neighbors", "radius_neighbors_graph"]
              },
              "SupervisedFloatMixin": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "SupervisedIntegerMixin": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "UnsupervisedMixin": {
                "methods": ["fit"]
              }
            }
          },
          "classification": {
            "functions": [],
            "types": {
              "KNeighborsClassifier": {
                "methods": ["predict", "predict_proba"]
              },
              "RadiusNeighborsClassifier": {
                "methods": ["predict"]
              }
            }
          },
          "graph": {
            "functions": ["kneighbors_graph", "radius_neighbors_graph"],
            "types": {}
          },
          "kde": {
            "functions": [],
            "types": {
              "KernelDensity": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "score_samples",
                  "score",
                  "sample"
                ]
              }
            }
          },
          "lof": {
            "functions": [],
            "types": {
              "LocalOutlierFactor": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "nca": {
            "functions": [],
            "types": {
              "NeighborhoodComponentsAnalysis": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform"
                ]
              }
            }
          },
          "nearest_centroid": {
            "functions": [],
            "types": {
              "NearestCentroid": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              }
            }
          },
          "regression": {
            "functions": [],
            "types": {
              "KNeighborsRegressor": {
                "methods": ["predict"]
              },
              "RadiusNeighborsRegressor": {
                "methods": ["predict"]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "unsupervised": {
            "functions": [],
            "types": {
              "NearestNeighbors": {
                "methods": []
              }
            }
          }
        },
        "types": {
          "NearestNeighbors": {
            "methods": []
          },
          "KNeighborsClassifier": {
            "methods": ["predict", "predict_proba"]
          },
          "RadiusNeighborsClassifier": {
            "methods": ["predict"]
          },
          "KNeighborsRegressor": {
            "methods": ["predict"]
          },
          "RadiusNeighborsRegressor": {
            "methods": ["predict"]
          },
          "NearestCentroid": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "KernelDensity": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "score_samples",
              "score",
              "sample"
            ]
          },
          "LocalOutlierFactor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "NeighborhoodComponentsAnalysis": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          }
        },
        "functions": ["kneighbors_graph", "radius_neighbors_graph"]
      },
      "neural_network": {
        "modules": {
          "tests": {
            "modules": {
              "test_mlp": {
                "functions": [
                  "test_alpha",
                  "test_fit",
                  "test_gradient",
                  "test_lbfgs_classification",
                  "test_lbfgs_regression",
                  "test_learning_rate_warmstart",
                  "test_multilabel_classification",
                  "test_partial_fit_classes_error",
                  "test_partial_fit_classification",
                  "test_partial_fit_unseen_classes",
                  "test_partial_fit_regression",
                  "test_partial_fit_errors",
                  "test_params_errors",
                  "test_predict_proba_binary",
                  "test_predict_proba_multiclass",
                  "test_predict_proba_multilabel",
                  "test_shuffle",
                  "test_sparse_matrices",
                  "test_tolerance",
                  "test_verbose_sgd",
                  "test_early_stopping",
                  "test_adaptive_learning_rate",
                  "test_n_iter_no_change",
                  "test_early_stopping_stratified"
                ],
                "types": {}
              },
              "test_rbm": {
                "functions": [
                  "test_fit",
                  "test_partial_fit",
                  "test_transform",
                  "test_small_sparse",
                  "test_small_sparse_partial_fit",
                  "test_sample_hiddens",
                  "test_fit_gibbs",
                  "test_fit_gibbs_sparse",
                  "test_gibbs_smoke",
                  "test_score_samples",
                  "test_rbm_verbose",
                  "test_sparse_and_verbose"
                ],
                "types": {}
              },
              "test_stochastic_optimizers": {
                "functions": [
                  "test_base_optimizer",
                  "test_sgd_optimizer_no_momentum",
                  "test_sgd_optimizer_momentum",
                  "test_sgd_optimizer_trigger_stopping",
                  "test_sgd_optimizer_nesterovs_momentum",
                  "test_adam_optimizer"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "multilayer_perceptron": {
            "functions": [],
            "types": {
              "BaseMultilayerPerceptron": {
                "methods": ["fit"]
              },
              "MLPClassifier": {
                "methods": [
                  "predict",
                  "fit",
                  "predict_log_proba",
                  "predict_proba"
                ]
              },
              "MLPRegressor": {
                "methods": ["predict"]
              }
            }
          },
          "rbm": {
            "functions": [],
            "types": {
              "BernoulliRBM": {
                "methods": [
                  "transform",
                  {
                    "name": "gibbs",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "score_samples",
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          }
        },
        "types": {
          "BernoulliRBM": {
            "methods": [
              "transform",
              {
                "name": "gibbs",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "score_samples",
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MLPClassifier": {
            "methods": ["predict", "fit", "predict_log_proba", "predict_proba"]
          },
          "MLPRegressor": {
            "methods": ["predict"]
          }
        },
        "functions": []
      },
      "preprocessing": {
        "modules": {
          "tests": {
            "modules": {
              "test_base": {
                "functions": [
                  "toarray",
                  "test_transform_selected_retain_order"
                ],
                "types": {}
              },
              "test_common": {
                "functions": [],
                "types": {}
              },
              "test_data": {
                "functions": [
                  "toarray",
                  "assert_correct_incr",
                  "test_polynomial_features",
                  "test_polynomial_feature_names",
                  "test_polynomial_feature_array_order",
                  "test_standard_scaler_1d",
                  "test_standard_scaler_dtype",
                  "test_scale_1d",
                  "test_scaler_2d_arrays",
                  "test_scaler_float16_overflow",
                  "test_handle_zeros_in_scale",
                  "test_minmax_scaler_partial_fit",
                  "test_standard_scaler_partial_fit",
                  "test_standard_scaler_partial_fit_numerical_stability",
                  "test_partial_fit_sparse_input",
                  "test_standard_scaler_trasform_with_partial_fit",
                  "test_min_max_scaler_iris",
                  "test_min_max_scaler_zero_variance_features",
                  "test_minmax_scale_axis1",
                  "test_min_max_scaler_1d",
                  "test_scaler_without_centering",
                  "test_scaler_return_identity",
                  "test_scaler_int",
                  "test_scaler_without_copy",
                  "test_scale_sparse_with_mean_raise_exception",
                  "test_scale_input_finiteness_validation",
                  "test_robust_scaler_error_sparse",
                  "test_robust_scaler_col_zero_sparse",
                  "test_robust_scaler_2d_arrays",
                  "test_robust_scaler_transform_one_row_csr",
                  "test_robust_scaler_iris",
                  "test_robust_scaler_iris_quantiles",
                  "test_quantile_transform_iris",
                  "test_quantile_transform_check_error",
                  "test_quantile_transform_sparse_ignore_zeros",
                  "test_quantile_transform_dense_toy",
                  "test_quantile_transform_subsampling",
                  "test_quantile_transform_sparse_toy",
                  "test_quantile_transform_bounds",
                  "test_quantile_transform_and_inverse",
                  "test_quantile_transform_nan",
                  "test_deprecated_quantile_transform_copy",
                  "test_robust_scaler_invalid_range",
                  "test_scale_function_without_centering",
                  "test_robust_scale_axis1",
                  "test_robust_scale_1d_array",
                  "test_robust_scaler_zero_variance_features",
                  "test_maxabs_scaler_zero_variance_features",
                  "test_maxabs_scaler_large_negative_value",
                  "test_maxabs_scaler_transform_one_row_csr",
                  "test_maxabs_scaler_1d",
                  "test_maxabs_scaler_partial_fit",
                  "test_normalizer_l1",
                  "test_normalizer_l2",
                  "test_normalizer_max",
                  "test_normalize",
                  "test_binarizer",
                  "test_center_kernel",
                  "test_cv_pipeline_precomputed",
                  "test_fit_transform",
                  "test_add_dummy_feature",
                  "test_add_dummy_feature_coo",
                  "test_add_dummy_feature_csc",
                  "test_add_dummy_feature_csr",
                  "test_fit_cold_start",
                  "test_power_transformer_1d",
                  "test_power_transformer_2d",
                  "test_power_transformer_boxcox_strictly_positive_exception",
                  "test_power_transformer_method_exception",
                  "test_power_transformer_lambda_zero",
                  "test_power_transformer_lambda_one",
                  "test_yeo_johnson_darwin_example",
                  "test_power_transform_default_method"
                ],
                "types": {}
              },
              "test_discretization": {
                "functions": [
                  "test_valid_n_bins",
                  "test_invalid_n_bins",
                  "test_invalid_n_bins_array",
                  "test_invalid_n_features",
                  "test_transform_1d_behavior",
                  "test_numeric_stability",
                  "test_invalid_encode_option",
                  "test_encode_options",
                  "test_invalid_strategy_option",
                  "test_overwrite",
                  "test_percentile_numeric_stability"
                ],
                "types": {}
              },
              "test_encoders": {
                "functions": [
                  "toarray",
                  "test_one_hot_encoder_sparse",
                  "test_one_hot_encoder_dense",
                  "test_one_hot_encoder_deprecationwarnings",
                  "test_one_hot_encoder_force_new_behaviour",
                  "test_one_hot_encoder_categorical_features",
                  "test_one_hot_encoder_categorical_features_ignore_unknown",
                  "test_one_hot_encoder_handle_unknown",
                  "test_one_hot_encoder_not_fitted",
                  "test_one_hot_encoder_no_categorical_features",
                  "test_one_hot_encoder_handle_unknown_strings",
                  "test_one_hot_encoder_set_params",
                  "check_categorical_onehot",
                  "test_one_hot_encoder_unsorted_categories",
                  "test_one_hot_encoder_specified_categories_mixed_columns",
                  "test_one_hot_encoder_pandas",
                  "test_one_hot_encoder_feature_names",
                  "test_one_hot_encoder_feature_names_unicode",
                  "test_ordinal_encoder_inverse",
                  "test_ordinal_encoder_raise_categories_shape",
                  "test_encoder_dtypes",
                  "test_encoder_dtypes_pandas",
                  "test_one_hot_encoder_warning",
                  "test_one_hot_encoder_drop_manual",
                  "test_one_hot_encoder_invalid_params"
                ],
                "types": {}
              },
              "test_function_transformer": {
                "functions": [
                  "test_delegate_to_func",
                  "test_function_transformer_frame"
                ],
                "types": {}
              },
              "test_imputation": {
                "functions": ["safe_median", "safe_mean"],
                "types": {}
              },
              "test_label": {
                "functions": [
                  "toarray",
                  "test_label_binarizer",
                  "test_label_binarizer_unseen_labels",
                  "test_label_binarizer_set_label_encoding",
                  "test_label_encoder_negative_ints",
                  "test_label_encoder_errors",
                  "test_sparse_output_multilabel_binarizer",
                  "test_multilabel_binarizer",
                  "test_multilabel_binarizer_empty_sample",
                  "test_multilabel_binarizer_unknown_class",
                  "test_multilabel_binarizer_given_classes",
                  "test_multilabel_binarizer_multiple_calls",
                  "test_multilabel_binarizer_same_length_sequence",
                  "test_multilabel_binarizer_non_integer_labels",
                  "test_multilabel_binarizer_non_unique",
                  "test_multilabel_binarizer_inverse_validation",
                  "test_label_binarize_with_class_order",
                  "check_binarized_results",
                  "test_label_binarize_binary",
                  "test_label_binarize_multiclass",
                  "test_label_binarize_multilabel",
                  "test_invalid_input_label_binarize",
                  "test_inverse_binarize_multiclass"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {}
          },
          "data": {
            "functions": [
              "scale",
              "minmax_scale",
              "maxabs_scale",
              "robust_scale",
              "normalize",
              {
                "name": "binarize",
                "updates": [0]
              },
              "add_dummy_feature",
              "quantile_transform",
              "power_transform"
            ],
            "types": {
              "MinMaxScaler": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "StandardScaler": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "MaxAbsScaler": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "partial_fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "RobustScaler": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "PolynomialFeatures": {
                "methods": [
                  "get_feature_names",
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform"
                ]
              },
              "Normalizer": {
                "methods": ["fit", "transform"]
              },
              "Binarizer": {
                "methods": ["fit", "transform"]
              },
              "KernelCenterer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform"
                ]
              },
              "QuantileTransformer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "PowerTransformer": {
                "methods": [
                  "fit",
                  "fit_transform",
                  {
                    "name": "transform",
                    "updates": [1]
                  },
                  {
                    "name": "inverse_transform",
                    "updates": [1]
                  }
                ]
              }
            }
          },
          "imputation": {
            "functions": [],
            "types": {
              "Imputer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "transform",
                    "updates": [1]
                  }
                ]
              }
            }
          },
          "label": {
            "functions": ["label_binarize"],
            "types": {
              "LabelEncoder": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "LabelBinarizer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              },
              "MultiLabelBinarizer": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  {
                    "name": "fit_transform",
                    "updates": [0, 0]
                  },
                  "transform",
                  "inverse_transform"
                ]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          }
        },
        "types": {
          "Binarizer": {
            "methods": ["fit", "transform"]
          },
          "KernelCenterer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "MinMaxScaler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "MaxAbsScaler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "Normalizer": {
            "methods": ["fit", "transform"]
          },
          "RobustScaler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "StandardScaler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "partial_fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "QuantileTransformer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "PowerTransformer": {
            "methods": [
              "fit",
              "fit_transform",
              {
                "name": "transform",
                "updates": [1]
              },
              {
                "name": "inverse_transform",
                "updates": [1]
              }
            ]
          },
          "PolynomialFeatures": {
            "methods": [
              "get_feature_names",
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "LabelBinarizer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "LabelEncoder": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "MultiLabelBinarizer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "fit_transform",
                "updates": [0, 0]
              },
              "transform",
              "inverse_transform"
            ]
          },
          "Imputer": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              {
                "name": "transform",
                "updates": [1]
              }
            ]
          }
        },
        "functions": [
          "add_dummy_feature",
          {
            "name": "binarize",
            "updates": [0]
          },
          "normalize",
          "scale",
          "robust_scale",
          "maxabs_scale",
          "minmax_scale",
          "quantile_transform",
          "power_transform",
          "label_binarize"
        ]
      },
      "semi_supervised": {
        "modules": {
          "tests": {
            "modules": {
              "test_label_propagation": {
                "functions": [
                  "test_fit_transduction",
                  "test_distribution",
                  "test_predict",
                  "test_predict_proba",
                  "test_label_spreading_closed_form",
                  "test_label_propagation_closed_form",
                  "test_valid_alpha",
                  "test_convergence_speed",
                  "test_convergence_warning"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "label_propagation": {
            "functions": [],
            "types": {
              "BaseLabelPropagation": {
                "methods": [
                  "predict",
                  "predict_proba",
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "LabelPropagation": {
                "methods": ["fit"]
              },
              "LabelSpreading": {
                "methods": []
              }
            }
          }
        },
        "types": {
          "LabelPropagation": {
            "methods": ["fit"]
          },
          "LabelSpreading": {
            "methods": []
          }
        },
        "functions": []
      },
      "svm": {
        "modules": {
          "tests": {
            "modules": {
              "test_bounds": {
                "functions": [
                  "test_l1_min_c_l2_loss",
                  "check_l1_min_c",
                  "test_ill_posed_min_c",
                  "test_unsupported_loss"
                ],
                "types": {}
              },
              "test_sparse": {
                "functions": [
                  "check_svm_model_equal",
                  "test_unsorted_indices",
                  "test_svc_with_custom_kernel",
                  "test_svc_iris",
                  "test_sparse_decision_function",
                  "test_error",
                  "test_linearsvc",
                  "test_linearsvc_iris",
                  "test_sample_weights",
                  "test_sparse_liblinear_intercept_handling",
                  "test_sparse_realdata",
                  "test_sparse_svc_clone_with_callable_kernel",
                  "test_timeout",
                  "test_consistent_proba"
                ],
                "types": {}
              },
              "test_svm": {
                "functions": [
                  "test_libsvm_parameters",
                  "test_libsvm_iris",
                  "test_precomputed",
                  "test_svr",
                  "test_linearsvr",
                  "test_linearsvr_fit_sampleweight",
                  "test_svr_errors",
                  "test_oneclass",
                  "test_oneclass_decision_function",
                  "test_oneclass_score_samples",
                  "test_tweak_params",
                  "test_probability",
                  "test_decision_function",
                  "test_decision_function_shape",
                  "test_svr_predict",
                  "test_sample_weights",
                  "test_bad_input",
                  "test_unicode_kernel",
                  "test_sparse_precomputed",
                  "test_linearsvc_parameters",
                  "test_linearsvx_loss_penalty_deprecations",
                  "test_linear_svx_uppercase_loss_penality_raises_error",
                  "test_linearsvc",
                  "test_linearsvc_crammer_singer",
                  "test_linearsvc_fit_sampleweight",
                  "test_crammer_singer_binary",
                  "test_linearsvc_iris",
                  "test_dense_liblinear_intercept_handling",
                  "test_liblinear_set_coef",
                  "test_immutable_coef_property",
                  "test_linearsvc_verbose",
                  "test_svc_clone_with_callable_kernel",
                  "test_svc_bad_kernel",
                  "test_timeout",
                  "test_unfitted",
                  "test_linear_svm_convergence_warnings",
                  "test_svr_coef_sign",
                  "test_linear_svc_intercept_scaling",
                  "test_lsvc_intercept_scaling_zero",
                  "test_hasattr_predict_proba",
                  "test_decision_function_shape_two_class",
                  "test_ovr_decision_function",
                  "test_gamma_auto",
                  "test_gamma_scale"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "base": {
            "functions": [],
            "types": {
              "BaseLibSVM": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict"
                ]
              },
              "BaseSVC": {
                "methods": ["decision_function", "predict"]
              }
            }
          },
          "bounds": {
            "functions": ["l1_min_c"],
            "types": {}
          },
          "classes": {
            "functions": [],
            "types": {
              "LinearSVC": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "LinearSVR": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "SVC": {
                "methods": []
              },
              "NuSVC": {
                "methods": []
              },
              "SVR": {
                "methods": []
              },
              "NuSVR": {
                "methods": []
              },
              "OneClassSVM": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "decision_function",
                  "score_samples",
                  "predict"
                ]
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          }
        },
        "types": {
          "SVC": {
            "methods": []
          },
          "NuSVC": {
            "methods": []
          },
          "SVR": {
            "methods": []
          },
          "NuSVR": {
            "methods": []
          },
          "OneClassSVM": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "decision_function",
              "score_samples",
              "predict"
            ]
          },
          "LinearSVC": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "LinearSVR": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          }
        },
        "functions": ["l1_min_c"]
      },
      "tests": {
        "modules": {
          "test_base": {
            "functions": [
              "test_clone",
              "test_clone_2",
              "test_clone_buggy",
              "test_clone_empty_array",
              "test_clone_nan",
              "test_clone_sparse_matrices",
              "test_clone_estimator_types",
              "test_repr",
              "test_str",
              "test_get_params",
              "test_is_classifier",
              "test_set_params",
              "test_set_params_passes_all_parameters",
              "test_set_params_updates_valid_params",
              "test_score_sample_weight",
              "test_clone_pandas_dataframe",
              "test_pickle_version_warning_is_not_raised_with_matching_version",
              "test_pickle_version_warning_is_issued_upon_different_version",
              "test_pickle_version_warning_is_issued_when_no_version_info_in_pickle",
              "test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator",
              "test_pickling_when_getstate_is_overwritten_by_mixin",
              "test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn",
              "test_tag_inheritance",
              "test_regressormixin_score_multioutput"
            ],
            "types": {
              "MyEstimator": {
                "methods": []
              },
              "K": {
                "methods": []
              },
              "T": {
                "methods": []
              },
              "NaNTag": {
                "methods": []
              },
              "NoNaNTag": {
                "methods": []
              },
              "OverrideTag": {
                "methods": []
              },
              "DiamondOverwriteTag": {
                "methods": []
              },
              "ModifyInitParams": {
                "methods": []
              },
              "Buggy": {
                "methods": []
              },
              "NoEstimator": {
                "methods": ["fit", "predict"]
              },
              "VargEstimator": {
                "methods": []
              },
              "TestDecisionTree": {
                "methods": ["set_params"]
              },
              "DummyEstimator": {
                "methods": ["fit", "transform"]
              },
              "TreeBadVersion": {
                "methods": []
              },
              "TreeNoVersion": {
                "methods": []
              },
              "DontPickleAttributeMixin": {
                "methods": []
              },
              "MultiInheritanceEstimator": {
                "methods": []
              },
              "SingleInheritanceEstimator": {
                "methods": []
              }
            }
          },
          "test_calibration": {
            "functions": [
              "test_calibration_multiclass",
              "test_calibration_prefit",
              "test_sigmoid_calibration",
              "test_calibration_curve",
              "test_calibration_nan_imputer",
              "test_calibration_prob_sum",
              "test_calibration_less_classes"
            ],
            "types": {
              "MockTensorClassifier": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "decision_function"
                ]
              }
            }
          },
          "test_check_build": {
            "functions": ["test_raise_build_error"],
            "types": {}
          },
          "test_common": {
            "functions": [
              "test_all_estimator_no_base_class",
              "test_root_import_all_completeness",
              "test_all_tests_are_importable"
            ],
            "types": {}
          },
          "test_config": {
            "functions": [
              "test_config_context",
              "test_config_context_exception",
              "test_set_config"
            ],
            "types": {}
          },
          "test_discriminant_analysis": {
            "functions": [
              "test_lda_predict",
              "test_lda_priors",
              "test_lda_coefs",
              "test_lda_transform",
              "test_lda_explained_variance_ratio",
              "test_lda_orthogonality",
              "test_lda_scaling",
              "test_lda_store_covariance",
              "test_lda_numeric_consistency_float32_float64",
              "test_qda",
              "test_qda_priors",
              "test_qda_store_covariance",
              "test_qda_regularization",
              "test_covariance"
            ],
            "types": {}
          },
          "test_docstring_parameters": {
            "functions": [],
            "types": {}
          },
          "test_dummy": {
            "functions": [
              "test_most_frequent_and_prior_strategy",
              "test_most_frequent_and_prior_strategy_with_2d_column_y",
              "test_most_frequent_and_prior_strategy_multioutput",
              "test_stratified_strategy",
              "test_stratified_strategy_multioutput",
              "test_uniform_strategy",
              "test_uniform_strategy_multioutput",
              "test_string_labels",
              "test_classifier_exceptions",
              "test_mean_strategy_regressor",
              "test_mean_strategy_multioutput_regressor",
              "test_regressor_exceptions",
              "test_median_strategy_regressor",
              "test_median_strategy_multioutput_regressor",
              "test_quantile_strategy_regressor",
              "test_quantile_strategy_multioutput_regressor",
              "test_quantile_invalid",
              "test_quantile_strategy_empty_train",
              "test_constant_strategy_regressor",
              "test_constant_strategy_multioutput_regressor",
              "test_y_mean_attribute_regressor",
              "test_unknown_strategey_regressor",
              "test_constants_not_specified_regressor",
              "test_constant_size_multioutput_regressor",
              "test_constant_strategy",
              "test_constant_strategy_multioutput",
              "test_constant_strategy_exceptions",
              "test_classification_sample_weight",
              "test_constant_strategy_sparse_target",
              "test_uniform_strategy_sparse_target_warning",
              "test_stratified_strategy_sparse_target",
              "test_most_frequent_and_prior_strategy_sparse_target",
              "test_dummy_regressor_sample_weight",
              "test_dummy_regressor_on_3D_array",
              "test_dummy_classifier_on_3D_array",
              "test_dummy_regressor_return_std"
            ],
            "types": {}
          },
          "test_init": {
            "functions": ["test_import_skl"],
            "types": {}
          },
          "test_isotonic": {
            "functions": [
              "test_permutation_invariance",
              "test_check_increasing_small_number_of_samples",
              "test_check_increasing_up",
              "test_check_increasing_up_extreme",
              "test_check_increasing_down",
              "test_check_increasing_down_extreme",
              "test_check_ci_warn",
              "test_isotonic_regression",
              "test_isotonic_regression_ties_min",
              "test_isotonic_regression_ties_max",
              "test_isotonic_regression_ties_secondary_",
              "test_isotonic_regression_with_ties_in_differently_sized_groups",
              "test_isotonic_regression_reversed",
              "test_isotonic_regression_auto_decreasing",
              "test_isotonic_regression_auto_increasing",
              "test_assert_raises_exceptions",
              "test_isotonic_sample_weight_parameter_default_value",
              "test_isotonic_min_max_boundaries",
              "test_isotonic_sample_weight",
              "test_isotonic_regression_oob_raise",
              "test_isotonic_regression_oob_clip",
              "test_isotonic_regression_oob_nan",
              "test_isotonic_regression_oob_bad",
              "test_isotonic_regression_oob_bad_after",
              "test_isotonic_regression_pickle",
              "test_isotonic_duplicate_min_entry",
              "test_isotonic_ymin_ymax",
              "test_isotonic_zero_weight_loop",
              "test_fast_predict",
              "test_isotonic_copy_before_fit",
              "test_isotonic_dtype",
              "test_make_unique_dtype"
            ],
            "types": {}
          },
          "test_kernel_approximation": {
            "functions": [
              "test_additive_chi2_sampler",
              "test_skewed_chi2_sampler",
              "test_rbf_sampler",
              "test_input_validation",
              "test_nystroem_approximation",
              "test_nystroem_default_parameters",
              "test_nystroem_singular_kernel",
              "test_nystroem_poly_kernel_params",
              "test_nystroem_callable"
            ],
            "types": {}
          },
          "test_kernel_ridge": {
            "functions": [
              "test_kernel_ridge",
              "test_kernel_ridge_csr",
              "test_kernel_ridge_csc",
              "test_kernel_ridge_singular_kernel",
              "test_kernel_ridge_precomputed",
              "test_kernel_ridge_precomputed_kernel_unchanged",
              "test_kernel_ridge_sample_weights",
              "test_kernel_ridge_multi_output"
            ],
            "types": {}
          },
          "test_metaestimators": {
            "functions": [],
            "types": {
              "DelegatorData": {
                "methods": []
              },
              "SubEstimator": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              }
            }
          },
          "test_multiclass": {
            "functions": [
              "test_ovr_exceptions",
              "test_check_classification_targets",
              "test_ovr_fit_predict",
              "test_ovr_partial_fit_exceptions",
              "test_ovr_ovo_regressor",
              "test_ovr_fit_predict_sparse",
              "test_ovr_multiclass",
              "test_ovr_multilabel",
              "test_ovr_fit_predict_svc",
              "test_ovr_multilabel_dataset",
              "test_ovr_single_label_predict_proba",
              "test_ovr_multilabel_decision_function",
              "test_ovr_single_label_decision_function",
              "test_ovr_pipeline",
              "test_ovr_coef_",
              "test_ovr_coef_exceptions",
              "test_ovo_exceptions",
              "test_ovo_fit_on_list",
              "test_ovo_fit_predict",
              "test_ovo_partial_fit_predict",
              "test_ovo_decision_function",
              "test_ovo_string_y",
              "test_ovo_one_class",
              "test_ovo_float_y",
              "test_ecoc_exceptions",
              "test_ecoc_fit_predict",
              "test_ecoc_float_y",
              "test_pairwise_indices",
              "test_pairwise_attribute"
            ],
            "types": {}
          },
          "test_multioutput": {
            "functions": [
              "test_multi_target_regression",
              "test_multi_target_regression_one_target",
              "test_multi_target_sparse_regression",
              "test_multi_target_sample_weights_api",
              "test_multi_target_sample_weights",
              "test_multi_output_classification_partial_fit_parallelism",
              "test_multi_output_predict_proba",
              "test_multi_output_classification",
              "test_multiclass_multioutput_estimator",
              "test_multiclass_multioutput_estimator_predict_proba",
              "test_multi_output_classification_sample_weights",
              "test_multi_output_exceptions",
              "generate_multilabel_dataset_with_correlations",
              "test_classifier_chain_fit_and_predict_with_linear_svc"
            ],
            "types": {}
          },
          "test_naive_bayes": {
            "functions": [
              "test_gnb",
              "test_gnb_prior",
              "test_gnb_sample_weight",
              "test_gnb_neg_priors",
              "test_gnb_priors",
              "test_gnb_priors_sum_isclose",
              "test_gnb_wrong_nb_priors",
              "test_gnb_prior_greater_one",
              "test_gnb_prior_large_bias",
              "test_check_update_with_no_data",
              "test_gnb_pfit_wrong_nb_features",
              "test_discrete_prior",
              "check_partial_fit",
              "test_mnb_prior_unobserved_targets",
              "test_gnb_partial_fit",
              "test_discretenb_predict_proba",
              "check_sample_weight_multiclass",
              "test_sample_weight_mnb",
              "test_coef_intercept_shape",
              "test_check_accuracy_on_digits",
              "test_feature_log_prob_bnb",
              "test_bnb",
              "test_cnb",
              "test_naive_bayes_scale_invariance",
              "test_alpha",
              "test_alpha_vector"
            ],
            "types": {}
          },
          "test_pipeline": {
            "functions": [
              "test_pipeline_init",
              "test_pipeline_init_tuple",
              "test_pipeline_fit_params",
              "test_pipeline_sample_weight_supported",
              "test_pipeline_sample_weight_unsupported",
              "test_pipeline_raise_set_params_error",
              "test_pipeline_methods_pca_svm",
              "test_pipeline_methods_preprocessing_svm",
              "test_fit_predict_on_pipeline",
              "test_fit_predict_on_pipeline_without_fit_predict",
              "test_fit_predict_with_intermediate_fit_params",
              "test_predict_with_predict_params",
              "test_feature_union",
              "test_make_union",
              "test_make_union_kwargs",
              "test_pipeline_transform",
              "test_pipeline_fit_transform",
              "test_pipeline_slice",
              "test_pipeline_index",
              "test_set_pipeline_steps",
              "test_pipeline_named_steps",
              "test_pipeline_ducktyping",
              "test_make_pipeline",
              "test_feature_union_weights",
              "test_feature_union_parallel",
              "test_feature_union_feature_names",
              "test_set_feature_union_steps",
              "test_step_name_validation",
              "test_pipeline_wrong_memory",
              "test_pipeline_with_cache_attribute",
              "test_pipeline_memory",
              "test_make_pipeline_memory",
              "test_pipeline_param_error"
            ],
            "types": {
              "NoFit": {
                "methods": []
              },
              "NoTrans": {
                "methods": [
                  "fit",
                  "get_params",
                  {
                    "name": "set_params",
                    "updates": [0]
                  }
                ]
              },
              "NoInvTransf": {
                "methods": ["transform"]
              },
              "Transf": {
                "methods": ["transform", "inverse_transform"]
              },
              "TransfFitParams": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "Mult": {
                "methods": [
                  "fit",
                  "transform",
                  "inverse_transform",
                  "predict",
                  "score"
                ]
              },
              "FitParamT": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  {
                    "name": "fit_predict",
                    "updates": [0]
                  },
                  "score"
                ]
              },
              "DummyTransf": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  }
                ]
              },
              "DummyEstimatorParams": {
                "methods": [
                  "fit",
                  {
                    "name": "predict",
                    "updates": [0]
                  }
                ]
              },
              "DummyMemory": {
                "methods": ["cache"]
              },
              "WrongDummyMemory": {
                "methods": []
              }
            }
          },
          "test_random_projection": {
            "functions": [
              "make_sparse_random_data",
              "densify",
              "test_invalid_jl_domain",
              "test_input_size_jl_min_dim",
              "check_input_size_random_matrix",
              "check_size_generated",
              "check_zero_mean_and_unit_norm",
              "check_input_with_sparse_random_matrix",
              "test_gaussian_random_matrix",
              "test_sparse_random_matrix",
              "test_sparse_random_projection_transformer_invalid_density",
              "test_random_projection_transformer_invalid_input",
              "test_try_to_transform_before_fit",
              "test_too_many_samples_to_find_a_safe_embedding",
              "test_random_projection_embedding_quality",
              "test_SparseRandomProjection_output_representation",
              "test_correct_RandomProjection_dimensions_embedding",
              "test_warning_n_components_greater_than_n_features",
              "test_works_with_sparse_data"
            ],
            "types": {}
          },
          "test_site_joblib": {
            "functions": ["test_old_pickle"],
            "types": {}
          }
        },
        "types": {},
        "functions": []
      },
      "tree": {
        "modules": {
          "tests": {
            "modules": {
              "test_export": {
                "functions": [
                  "test_graphviz_toy",
                  "test_graphviz_errors",
                  "test_friedman_mse_in_graphviz",
                  "test_precision",
                  "test_export_text_errors",
                  "test_export_text",
                  "test_plot_tree_entropy",
                  "test_plot_tree_gini"
                ],
                "types": {}
              },
              "test_reingold_tilford": {
                "functions": [],
                "types": {}
              },
              "test_tree": {
                "functions": [
                  "assert_tree_equal",
                  "test_classification_toy",
                  "test_weighted_classification_toy",
                  "test_regression_toy",
                  "test_xor",
                  "test_iris",
                  "test_boston",
                  "test_probability",
                  "test_arrayrepr",
                  "test_pure_set",
                  "test_numerical_stability",
                  "test_importances",
                  "test_importances_raises",
                  "test_importances_gini_equal_mse",
                  "test_max_features",
                  "test_error",
                  "test_min_samples_split",
                  "test_min_samples_leaf",
                  "check_min_weight_fraction_leaf",
                  "check_min_weight_fraction_leaf_with_min_samples_leaf",
                  "test_min_impurity_split",
                  "test_min_impurity_decrease",
                  "test_multioutput",
                  "test_classes_shape",
                  "test_unbalanced_iris",
                  "test_memory_layout",
                  "test_sample_weight",
                  "test_sample_weight_invalid",
                  "check_class_weights",
                  "check_class_weight_errors",
                  "test_max_leaf_nodes",
                  "test_max_leaf_nodes_max_depth",
                  "test_arrays_persist",
                  "test_only_constant_features",
                  "test_behaviour_constant_feature_after_splits",
                  "test_with_only_one_non_constant_features",
                  "test_big_input",
                  "test_realloc",
                  "test_huge_allocations",
                  "check_sparse_input",
                  "check_sparse_parameters",
                  "check_sparse_criterion",
                  "check_explicit_sparse_zeros",
                  "check_min_weight_leaf_split_level",
                  "check_public_apply",
                  "check_public_apply_sparse",
                  "check_presort_sparse",
                  "test_presort_sparse",
                  "test_decision_path_hardcoded",
                  "check_decision_path",
                  "check_no_sparse_y_support",
                  "test_mae",
                  "test_criterion_copy",
                  "test_empty_leaf_infinite_threshold",
                  "test_decision_tree_memmap"
                ],
                "types": {}
              }
            },
            "types": {},
            "functions": []
          },
          "export": {
            "functions": ["plot_tree", "export_graphviz", "export_text"],
            "types": {
              "Sentinel": {
                "methods": []
              }
            }
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "tree": {
            "functions": [],
            "types": {
              "BaseDecisionTree": {
                "methods": [
                  "get_depth",
                  "get_n_leaves",
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "apply",
                  "decision_path"
                ]
              },
              "DecisionTreeClassifier": {
                "methods": ["fit", "predict_proba", "predict_log_proba"]
              },
              "DecisionTreeRegressor": {
                "methods": ["fit"]
              },
              "ExtraTreeClassifier": {
                "methods": []
              },
              "ExtraTreeRegressor": {
                "methods": []
              }
            }
          }
        },
        "types": {
          "DecisionTreeClassifier": {
            "methods": ["fit", "predict_proba", "predict_log_proba"]
          },
          "DecisionTreeRegressor": {
            "methods": ["fit"]
          },
          "ExtraTreeClassifier": {
            "methods": []
          },
          "ExtraTreeRegressor": {
            "methods": []
          }
        },
        "functions": ["export_graphviz", "plot_tree", "export_text"]
      },
      "utils": {
        "modules": {
          "tests": {
            "modules": {
              "test_class_weight": {
                "functions": [
                  "test_compute_class_weight",
                  "test_compute_class_weight_not_present",
                  "test_compute_class_weight_dict",
                  "test_compute_class_weight_balanced_negative",
                  "test_compute_class_weight_balanced_unordered",
                  "test_compute_class_weight_default",
                  "test_compute_sample_weight",
                  "test_compute_sample_weight_with_subsample",
                  "test_compute_sample_weight_errors",
                  "test_compute_sample_weight_more_than_32"
                ],
                "types": {}
              },
              "test_cython_blas": {
                "functions": [],
                "types": {}
              },
              "test_deprecation": {
                "functions": [
                  "test_deprecated",
                  "test_is_deprecated",
                  "test_pickle"
                ],
                "types": {
                  "MockClass1": {
                    "methods": []
                  },
                  "MockClass2": {
                    "methods": []
                  },
                  "MockClass3": {
                    "methods": []
                  },
                  "MockClass4": {
                    "methods": []
                  }
                }
              },
              "test_estimator_checks": {
                "functions": [
                  "test_check_fit_score_takes_y_works_on_deprecated_fit",
                  "test_check_estimator",
                  "test_check_outlier_corruption",
                  "test_check_estimator_transformer_no_mixin",
                  "test_check_estimator_clones",
                  "test_check_estimators_unfitted",
                  "test_check_no_attributes_set_in_init",
                  "test_check_estimator_pairwise",
                  "run_tests_without_pytest",
                  "test_check_class_weight_balanced_linear_classifier"
                ],
                "types": {
                  "CorrectNotFittedError": {
                    "methods": []
                  },
                  "BaseBadClassifier": {
                    "methods": ["fit", "predict"]
                  },
                  "ChangesDict": {
                    "methods": [
                      "fit",
                      {
                        "name": "predict",
                        "updates": [0]
                      }
                    ]
                  },
                  "SetsWrongAttribute": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "ChangesWrongAttribute": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "ChangesUnderscoreAttribute": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "RaisesErrorInSetParams": {
                    "methods": [
                      {
                        "name": "set_params",
                        "updates": [0]
                      },
                      "fit"
                    ]
                  },
                  "ModifiesValueInsteadOfRaisingError": {
                    "methods": [
                      {
                        "name": "set_params",
                        "updates": [0]
                      },
                      "fit"
                    ]
                  },
                  "ModifiesAnotherValue": {
                    "methods": [
                      {
                        "name": "set_params",
                        "updates": [0]
                      },
                      "fit"
                    ]
                  },
                  "NoCheckinPredict": {
                    "methods": ["fit"]
                  },
                  "NoSparseClassifier": {
                    "methods": ["fit", "predict"]
                  },
                  "CorrectNotFittedErrorClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      "predict"
                    ]
                  },
                  "NoSampleWeightPandasSeriesType": {
                    "methods": ["fit", "predict"]
                  },
                  "BadBalancedWeightsClassifier": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      }
                    ]
                  },
                  "BadTransformerWithoutMixin": {
                    "methods": ["fit", "transform"]
                  },
                  "NotInvariantPredict": {
                    "methods": ["fit", "predict"]
                  },
                  "LargeSparseNotSupportedClassifier": {
                    "methods": ["fit"]
                  },
                  "SparseTransformer": {
                    "methods": [
                      {
                        "name": "fit",
                        "updates": [0]
                      },
                      {
                        "name": "fit_transform",
                        "updates": [0]
                      },
                      "transform"
                    ]
                  },
                  "TestEstimatorWithDeprecatedFitMethod": {
                    "methods": []
                  },
                  "NonConformantEstimatorPrivateSet": {
                    "methods": []
                  },
                  "NonConformantEstimatorNoParamSet": {
                    "methods": []
                  }
                }
              },
              "test_extmath": {
                "functions": [
                  "test_density",
                  "test_uniform_weights",
                  "test_random_weights",
                  "check_randomized_svd_low_rank",
                  "test_randomized_svd_low_rank_with_noise",
                  "test_randomized_svd_infinite_rank",
                  "test_randomized_svd_transpose_consistency",
                  "test_randomized_svd_power_iteration_normalizer",
                  "test_randomized_svd_sparse_warnings",
                  "test_svd_flip",
                  "test_randomized_svd_sign_flip",
                  "test_randomized_svd_sign_flip_with_transpose",
                  "test_cartesian",
                  "test_logistic_sigmoid",
                  "test_incremental_variance_update_formulas",
                  "test_incremental_mean_and_variance_ignore_nan",
                  "test_incremental_variance_ddof",
                  "test_vector_sign_flip",
                  "test_softmax",
                  "test_stable_cumsum"
                ],
                "types": {}
              },
              "test_fast_dict": {
                "functions": [
                  "test_int_float_dict",
                  "test_int_float_dict_argmin"
                ],
                "types": {}
              },
              "test_fixes": {
                "functions": ["test_masked_array_obj_dtype_pickleable"],
                "types": {}
              },
              "test_linear_assignment": {
                "functions": [],
                "types": {}
              },
              "test_metaestimators": {
                "functions": [
                  "test_delegated_docstring",
                  "test_if_delegate_has_method"
                ],
                "types": {
                  "Prefix": {
                    "methods": ["func"]
                  },
                  "MockMetaEstimator": {
                    "methods": []
                  },
                  "MetaEst": {
                    "methods": []
                  },
                  "MetaEstTestTuple": {
                    "methods": []
                  },
                  "MetaEstTestList": {
                    "methods": []
                  },
                  "HasPredict": {
                    "methods": ["predict"]
                  },
                  "HasNoPredict": {
                    "methods": []
                  }
                }
              },
              "test_multiclass": {
                "functions": [
                  "test_unique_labels",
                  "test_unique_labels_non_specific",
                  "test_unique_labels_mixed_types",
                  "test_is_multilabel",
                  "test_check_classification_targets",
                  "test_type_of_target",
                  "test_class_distribution",
                  "test_safe_split_with_precomputed_kernel",
                  "test_ovr_decision_function"
                ],
                "types": {
                  "NotAnArray": {
                    "methods": []
                  }
                }
              },
              "test_murmurhash": {
                "functions": [
                  "test_mmhash3_int",
                  "test_mmhash3_int_array",
                  "test_mmhash3_bytes",
                  "test_mmhash3_unicode",
                  "test_no_collision_on_byte_range",
                  "test_uniform_distribution"
                ],
                "types": {}
              },
              "test_optimize": {
                "functions": ["test_newton_cg"],
                "types": {}
              },
              "test_pprint": {
                "functions": [
                  "test_basic",
                  "test_changed_only",
                  "test_pipeline",
                  "test_deeply_nested",
                  "test_gridsearch",
                  "test_gridsearch_pipeline",
                  "test_n_max_elements_to_show",
                  "test_bruteforce_ellipsis",
                  "test_builtin_prettyprinter"
                ],
                "types": {
                  "LogisticRegression": {
                    "methods": ["fit"]
                  },
                  "StandardScaler": {
                    "methods": ["transform"]
                  },
                  "RFE": {
                    "methods": []
                  },
                  "GridSearchCV": {
                    "methods": []
                  },
                  "CountVectorizer": {
                    "methods": []
                  },
                  "Pipeline": {
                    "methods": []
                  },
                  "SVC": {
                    "methods": []
                  },
                  "PCA": {
                    "methods": []
                  },
                  "NMF": {
                    "methods": []
                  },
                  "SimpleImputer": {
                    "methods": []
                  }
                }
              },
              "test_random": {
                "functions": [
                  "test_invalid_sample_without_replacement_algorithm",
                  "test_sample_without_replacement_algorithms",
                  "check_edge_case_of_sample_int",
                  "check_sample_int",
                  "check_sample_int_distribution",
                  "test_random_choice_csc",
                  "test_random_choice_csc_errors",
                  "test_our_rand_r"
                ],
                "types": {}
              },
              "test_seq_dataset": {
                "functions": [
                  "assert_csr_equal_values",
                  "make_dense_dataset_32",
                  "make_dense_dataset_64",
                  "make_sparse_dataset_32",
                  "make_sparse_dataset_64",
                  "test_buffer_dtype_mismatch_error"
                ],
                "types": {}
              },
              "test_shortest_path": {
                "functions": [
                  {
                    "name": "floyd_warshall_slow",
                    "updates": [0]
                  },
                  "generate_graph",
                  "test_floyd_warshall",
                  "test_dijkstra",
                  "test_shortest_path",
                  "test_dijkstra_bug_fix"
                ],
                "types": {}
              },
              "test_show_versions": {
                "functions": [
                  "test_get_sys_info",
                  "test_get_deps_info",
                  "test_show_versions_with_blas"
                ],
                "types": {}
              },
              "test_sparsefuncs": {
                "functions": [
                  "test_mean_variance_axis0",
                  "test_mean_variance_axis1",
                  "test_incr_mean_variance_axis",
                  "test_mean_variance_illegal_axis",
                  "test_densify_rows",
                  "test_inplace_column_scale",
                  "test_inplace_row_scale",
                  "test_inplace_swap_row",
                  "test_inplace_swap_column",
                  "test_min_max_axis_errors",
                  "test_count_nonzero",
                  "test_csc_row_median",
                  "test_inplace_normalize"
                ],
                "types": {}
              },
              "test_testing": {
                "functions": [
                  "test_assert_less",
                  "test_assert_greater",
                  "test_assert_less_equal",
                  "test_assert_greater_equal",
                  "test_set_random_state",
                  "test_assert_allclose_dense_sparse",
                  "test_assert_raises_msg",
                  "test_assert_raise_message",
                  "test_ignore_warning",
                  "f_ok",
                  "f_bad_sections",
                  "f_bad_order",
                  "f_missing",
                  "f_check_param_definition",
                  "test_check_docstring_parameters",
                  "check_memmap",
                  "test_tempmemmap",
                  "test_create_memmap_backed_data"
                ],
                "types": {
                  "TestWarns": {
                    "methods": ["test_warn", "test_warn_wrong_warning"]
                  },
                  "Klass": {
                    "methods": ["f_missing", "f_bad_sections"]
                  },
                  "MockEst": {
                    "methods": ["fit", "predict", "predict_proba", "score"]
                  },
                  "MockMetaEstimator": {
                    "methods": []
                  },
                  "RegistrationCounter": {
                    "methods": []
                  }
                }
              },
              "test_utils": {
                "functions": [
                  "test_make_rng",
                  "test_deprecated",
                  "test_resample",
                  "test_resample_stratified",
                  "test_resample_stratified_replace",
                  "test_resample_stratify_2dy",
                  "test_resample_stratify_sparse_error",
                  "test_safe_mask",
                  "test_column_or_1d",
                  "test_safe_indexing",
                  "test_safe_indexing_pandas",
                  "test_safe_indexing_mock_pandas",
                  "test_shuffle_on_ndim_equals_three",
                  "test_shuffle_dont_convert_to_array",
                  "test_gen_even_slices",
                  "dummy_func",
                  "test_deprecation_joblib_api"
                ],
                "types": {
                  "Ham": {
                    "methods": []
                  }
                }
              },
              "test_validation": {
                "functions": [
                  "test_as_float_array",
                  "test_np_matrix",
                  "test_memmap",
                  "test_ordering",
                  "test_check_array_force_all_finite_object",
                  "test_check_array_pandas_dtype_object_conversion",
                  "test_check_array_on_mock_dataframe",
                  "test_check_array_dtype_stability",
                  "test_check_array_dtype_warning",
                  "test_check_array_warn_on_dtype_deprecation",
                  "test_check_array_accept_sparse_type_exception",
                  "test_check_array_accept_sparse_no_exception",
                  "test_check_array_accept_large_sparse_no_exception",
                  "test_check_array_accept_large_sparse_raise_exception",
                  "test_check_array_min_samples_and_features_messages",
                  "test_check_array_complex_data_error",
                  "test_has_fit_parameter",
                  "test_check_symmetric",
                  "test_check_is_fitted",
                  "test_check_consistent_length",
                  "test_check_dataframe_fit_attribute",
                  "test_suppress_validation",
                  "test_check_array_series",
                  "test_check_dataframe_warns_on_dtype",
                  "test_check_X_y_informative_error",
                  "test_retrieve_samples_from_non_standard_shape"
                ],
                "types": {
                  "TestClassWithDeprecatedFitMethod": {
                    "methods": []
                  },
                  "DummyMemory": {
                    "methods": ["cache"]
                  },
                  "WrongDummyMemory": {
                    "methods": []
                  },
                  "TestNonNumericShape": {
                    "methods": []
                  }
                }
              }
            },
            "types": {},
            "functions": []
          },
          "class_weight": {
            "functions": ["compute_class_weight", "compute_sample_weight"],
            "types": {}
          },
          "deprecation": {
            "functions": [],
            "types": {
              "deprecated": {
                "methods": []
              }
            }
          },
          "estimator_checks": {
            "functions": [
              "check_estimator",
              {
                "name": "set_checking_parameters",
                "updates": [0]
              },
              "pairwise_estimator_convert_X",
              "check_estimator_sparse_data",
              "check_complex_data",
              "is_public_parameter",
              "check_outlier_corruption",
              "check_outliers_train",
              "choose_check_classifiers_labels",
              "check_classifiers_classes",
              "check_no_attributes_set_in_init",
              "check_parameters_default_constructible",
              "multioutput_estimator_convert_y_2d",
              "check_outliers_fit_predict",
              "check_fit_idempotent"
            ],
            "types": {
              "NotAnArray": {
                "methods": []
              }
            }
          },
          "extmath": {
            "functions": [
              "squared_norm",
              "row_norms",
              "fast_logdet",
              "density",
              "safe_sparse_dot",
              "randomized_range_finder",
              "randomized_svd",
              "weighted_mode",
              {
                "name": "cartesian",
                "updates": [1]
              },
              "svd_flip",
              "log_logistic",
              "softmax",
              "safe_min",
              "make_nonnegative",
              "stable_cumsum"
            ],
            "types": {}
          },
          "fixes": {
            "functions": ["parallel_helper"],
            "types": {
              "MaskedArray": {
                "methods": []
              }
            }
          },
          "graph": {
            "functions": ["single_source_shortest_path_length"],
            "types": {}
          },
          "linear_assignment_": {
            "functions": ["linear_assignment"],
            "types": {}
          },
          "metaestimators": {
            "functions": ["if_delegate_has_method"],
            "types": {}
          },
          "mocking": {
            "functions": [],
            "types": {
              "ArraySlicingWrapper": {
                "methods": []
              },
              "MockDataFrame": {
                "methods": []
              },
              "CheckingClassifier": {
                "methods": [
                  {
                    "name": "fit",
                    "updates": [0]
                  },
                  "predict",
                  "score"
                ]
              }
            }
          },
          "multiclass": {
            "functions": [
              "unique_labels",
              "is_multilabel",
              "check_classification_targets",
              "type_of_target",
              "class_distribution"
            ],
            "types": {}
          },
          "optimize": {
            "functions": ["newton_cg"],
            "types": {}
          },
          "random": {
            "functions": [
              {
                "name": "random_choice_csc",
                "updates": [1]
              }
            ],
            "types": {}
          },
          "setup": {
            "functions": ["configuration"],
            "types": {}
          },
          "sparsefuncs": {
            "functions": [
              {
                "name": "inplace_csr_column_scale",
                "updates": [0]
              },
              {
                "name": "inplace_csr_row_scale",
                "updates": [0]
              },
              "mean_variance_axis",
              "incr_mean_variance_axis",
              "inplace_column_scale",
              "inplace_row_scale",
              "inplace_swap_row_csc",
              {
                "name": "inplace_swap_row_csr",
                "updates": [0]
              },
              "inplace_swap_row",
              "inplace_swap_column",
              "min_max_axis",
              "count_nonzero",
              "csc_median_axis_0"
            ],
            "types": {}
          },
          "stats": {
            "functions": [],
            "types": {}
          },
          "testing": {
            "functions": [
              "assert_warns",
              "assert_warns_message",
              "assert_warns_div0",
              "assert_no_warnings",
              "ignore_warnings",
              "assert_raise_message",
              "assert_allclose_dense_sparse",
              "install_mldata_mock",
              "uninstall_mldata_mock",
              "all_estimators",
              "set_random_state",
              "clean_warning_registry",
              "check_skip_network",
              "create_memmap_backed_data",
              "check_docstring_parameters",
              "assert_run_python_script"
            ],
            "types": {
              "mock_mldata_urlopen": {
                "methods": []
              },
              "TempMemmap": {
                "methods": []
              }
            }
          },
          "validation": {
            "functions": [
              "assert_all_finite",
              "as_float_array",
              "check_memory",
              "check_consistent_length",
              "indexable",
              "check_array",
              "check_X_y",
              "column_or_1d",
              "check_random_state",
              "has_fit_parameter",
              "check_symmetric",
              "check_is_fitted",
              "check_non_negative",
              "check_scalar"
            ],
            "types": {}
          }
        },
        "types": {
          "deprecated": {
            "methods": []
          }
        },
        "functions": [
          "compute_class_weight",
          "compute_sample_weight",
          "as_float_array",
          "assert_all_finite",
          "check_random_state",
          "column_or_1d",
          "check_array",
          "check_consistent_length",
          "check_X_y",
          "indexable",
          "check_symmetric",
          "check_scalar"
        ]
      },
      "base": {
        "functions": [
          "clone",
          "is_classifier",
          "is_regressor",
          "is_outlier_detector"
        ],
        "types": {
          "BaseEstimator": {
            "methods": ["get_params", "set_params"]
          },
          "ClassifierMixin": {
            "methods": ["score"]
          },
          "RegressorMixin": {
            "methods": ["score"]
          },
          "ClusterMixin": {
            "methods": ["fit_predict"]
          },
          "BiclusterMixin": {
            "methods": ["get_indices", "get_shape", "get_submatrix"]
          },
          "TransformerMixin": {
            "methods": ["fit_transform"]
          },
          "DensityMixin": {
            "methods": ["score"]
          },
          "OutlierMixin": {
            "methods": ["fit_predict"]
          },
          "MetaEstimatorMixin": {
            "methods": []
          },
          "MultiOutputMixin": {
            "methods": []
          }
        }
      },
      "calibration": {
        "functions": ["calibration_curve"],
        "types": {
          "CalibratedClassifierCV": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict_proba",
              "predict"
            ]
          }
        }
      },
      "conftest": {
        "functions": [],
        "types": {}
      },
      "discriminant_analysis": {
        "functions": [],
        "types": {
          "LinearDiscriminantAnalysis": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "predict_proba",
              "predict_log_proba"
            ]
          },
          "QuadraticDiscriminantAnalysis": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "decision_function",
              "predict",
              "predict_proba",
              "predict_log_proba"
            ]
          }
        }
      },
      "dummy": {
        "functions": [],
        "types": {
          "DummyClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "predict_proba",
              "predict_log_proba",
              "score"
            ]
          },
          "DummyRegressor": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "score"
            ]
          }
        }
      },
      "exceptions": {
        "functions": [],
        "types": {
          "NotFittedError": {
            "methods": []
          },
          "ChangedBehaviorWarning": {
            "methods": []
          },
          "ConvergenceWarning": {
            "methods": []
          },
          "DataConversionWarning": {
            "methods": []
          },
          "DataDimensionalityWarning": {
            "methods": []
          },
          "EfficiencyWarning": {
            "methods": []
          },
          "FitFailedWarning": {
            "methods": []
          },
          "NonBLASDotWarning": {
            "methods": []
          },
          "SkipTestWarning": {
            "methods": []
          },
          "UndefinedMetricWarning": {
            "methods": []
          }
        }
      },
      "isotonic": {
        "functions": ["check_increasing", "isotonic_regression"],
        "types": {
          "IsotonicRegression": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform",
              "predict"
            ]
          }
        }
      },
      "kernel_approximation": {
        "functions": [],
        "types": {
          "RBFSampler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "SkewedChi2Sampler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "AdditiveChi2Sampler": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "Nystroem": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          }
        }
      },
      "kernel_ridge": {
        "functions": [],
        "types": {
          "KernelRidge": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          }
        }
      },
      "multiclass": {
        "functions": [],
        "types": {
          "OneVsRestClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "OneVsOneClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict",
              "decision_function"
            ]
          },
          "OutputCodeClassifier": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          }
        }
      },
      "multioutput": {
        "functions": [],
        "types": {
          "MultiOutputEstimator": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "predict"
            ]
          },
          "MultiOutputRegressor": {
            "methods": ["score"]
          },
          "MultiOutputClassifier": {
            "methods": ["predict_proba", "score"]
          },
          "ClassifierChain": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "RegressorChain": {
            "methods": ["fit"]
          }
        }
      },
      "naive_bayes": {
        "functions": [],
        "types": {
          "BaseNB": {
            "methods": ["predict", "predict_log_proba", "predict_proba"]
          },
          "GaussianNB": {
            "methods": [
              {
                "name": "partial_fit",
                "updates": [0]
              },
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "BaseDiscreteNB": {
            "methods": [
              {
                "name": "partial_fit",
                "updates": [0]
              },
              {
                "name": "fit",
                "updates": [0]
              }
            ]
          },
          "MultinomialNB": {
            "methods": []
          },
          "ComplementNB": {
            "methods": []
          },
          "BernoulliNB": {
            "methods": []
          }
        }
      },
      "pipeline": {
        "functions": ["make_pipeline", "make_union"],
        "types": {
          "Pipeline": {
            "methods": ["get_params", "set_params", "fit", "fit_transform"]
          },
          "FeatureUnion": {
            "methods": [
              "get_params",
              "set_params",
              "get_feature_names",
              "fit",
              "fit_transform",
              "transform"
            ]
          }
        }
      },
      "random_projection": {
        "functions": [
          "johnson_lindenstrauss_min_dim",
          "gaussian_random_matrix",
          "sparse_random_matrix"
        ],
        "types": {
          "BaseRandomProjection": {
            "methods": [
              {
                "name": "fit",
                "updates": [0]
              },
              "transform"
            ]
          },
          "GaussianRandomProjection": {
            "methods": []
          },
          "SparseRandomProjection": {
            "methods": []
          }
        }
      },
      "setup": {
        "functions": ["configuration"],
        "types": {}
      }
    },
    "types": {},
    "functions": []
  }
}
